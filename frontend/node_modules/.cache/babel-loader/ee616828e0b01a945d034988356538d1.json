{"ast":null,"code":"'use strict';\n\nconst {\n  Writable\n} = require('stream');\n\nconst {\n  getDecoder\n} = require('../utils.js');\n\nclass URLEncoded extends Writable {\n  constructor(cfg) {\n    const streamOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: typeof cfg.highWaterMark === 'number' ? cfg.highWaterMark : undefined\n    };\n    super(streamOpts);\n    let charset = cfg.defCharset || 'utf8';\n    if (cfg.conType.params && typeof cfg.conType.params.charset === 'string') charset = cfg.conType.params.charset;\n    this.charset = charset;\n    const limits = cfg.limits;\n    this.fieldSizeLimit = limits && typeof limits.fieldSize === 'number' ? limits.fieldSize : 1 * 1024 * 1024;\n    this.fieldsLimit = limits && typeof limits.fields === 'number' ? limits.fields : Infinity;\n    this.fieldNameSizeLimit = limits && typeof limits.fieldNameSize === 'number' ? limits.fieldNameSize : 100;\n    this._inKey = true;\n    this._keyTrunc = false;\n    this._valTrunc = false;\n    this._bytesKey = 0;\n    this._bytesVal = 0;\n    this._fields = 0;\n    this._key = '';\n    this._val = '';\n    this._byte = -2;\n    this._lastPos = 0;\n    this._encode = 0;\n    this._decoder = getDecoder(charset);\n  }\n\n  static detect(conType) {\n    return conType.type === 'application' && conType.subtype === 'x-www-form-urlencoded';\n  }\n\n  _write(chunk, enc, cb) {\n    if (this._fields >= this.fieldsLimit) return cb();\n    let i = 0;\n    const len = chunk.length;\n    this._lastPos = 0; // Check if we last ended mid-percent-encoded byte\n\n    if (this._byte !== -2) {\n      i = readPctEnc(this, chunk, i, len);\n      if (i === -1) return cb(new Error('Malformed urlencoded form'));\n      if (i >= len) return cb();\n      if (this._inKey) ++this._bytesKey;else ++this._bytesVal;\n    }\n\n    main: while (i < len) {\n      if (this._inKey) {\n        // Parsing key\n        i = skipKeyBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 61:\n              // '='\n              if (this._lastPos < i) this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              this._inKey = false;\n              continue main;\n\n            case 38:\n              // '&'\n              if (this._lastPos < i) this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n\n              if (this._bytesKey > 0) {\n                this.emit('field', this._key, '', {\n                  nameTruncated: this._keyTrunc,\n                  valueTruncated: false,\n                  encoding: this.charset,\n                  mimeType: 'text/plain'\n                });\n              }\n\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n\n              continue;\n\n            case 43:\n              // '+'\n              if (this._lastPos < i) this._key += chunk.latin1Slice(this._lastPos, i);\n              this._key += ' ';\n              this._lastPos = i + 1;\n              break;\n\n            case 37:\n              // '%'\n              if (this._encode === 0) this._encode = 1;\n              if (this._lastPos < i) this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1) return cb(new Error('Malformed urlencoded form'));\n              if (i >= len) return cb();\n              ++this._bytesKey;\n              i = skipKeyBytes(this, chunk, i, len);\n              continue;\n          }\n\n          ++i;\n          ++this._bytesKey;\n          i = skipKeyBytes(this, chunk, i, len);\n        }\n\n        if (this._lastPos < i) this._key += chunk.latin1Slice(this._lastPos, i);\n      } else {\n        // Parsing value\n        i = skipValBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 38:\n              // '&'\n              if (this._lastPos < i) this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._inKey = true;\n              this._val = this._decoder(this._val, this._encode);\n              this._encode = 0;\n\n              if (this._bytesKey > 0 || this._bytesVal > 0) {\n                this.emit('field', this._key, this._val, {\n                  nameTruncated: this._keyTrunc,\n                  valueTruncated: this._valTrunc,\n                  encoding: this.charset,\n                  mimeType: 'text/plain'\n                });\n              }\n\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n\n              continue main;\n\n            case 43:\n              // '+'\n              if (this._lastPos < i) this._val += chunk.latin1Slice(this._lastPos, i);\n              this._val += ' ';\n              this._lastPos = i + 1;\n              break;\n\n            case 37:\n              // '%'\n              if (this._encode === 0) this._encode = 1;\n              if (this._lastPos < i) this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1) return cb(new Error('Malformed urlencoded form'));\n              if (i >= len) return cb();\n              ++this._bytesVal;\n              i = skipValBytes(this, chunk, i, len);\n              continue;\n          }\n\n          ++i;\n          ++this._bytesVal;\n          i = skipValBytes(this, chunk, i, len);\n        }\n\n        if (this._lastPos < i) this._val += chunk.latin1Slice(this._lastPos, i);\n      }\n    }\n\n    cb();\n  }\n\n  _final(cb) {\n    if (this._byte !== -2) return cb(new Error('Malformed urlencoded form'));\n\n    if (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) {\n      if (this._inKey) this._key = this._decoder(this._key, this._encode);else this._val = this._decoder(this._val, this._encode);\n      this.emit('field', this._key, this._val, {\n        nameTruncated: this._keyTrunc,\n        valueTruncated: this._valTrunc,\n        encoding: this.charset,\n        mimeType: 'text/plain'\n      });\n    }\n\n    cb();\n  }\n\n}\n\nfunction readPctEnc(self, chunk, pos, len) {\n  if (pos >= len) return len;\n\n  if (self._byte === -1) {\n    // We saw a '%' but no hex characters yet\n    const hexUpper = HEX_VALUES[chunk[pos++]];\n    if (hexUpper === -1) return -1;\n    if (hexUpper >= 8) self._encode = 2; // Indicate high bits detected\n\n    if (pos < len) {\n      // Both hex characters are in this chunk\n      const hexLower = HEX_VALUES[chunk[pos++]];\n      if (hexLower === -1) return -1;\n      if (self._inKey) self._key += String.fromCharCode((hexUpper << 4) + hexLower);else self._val += String.fromCharCode((hexUpper << 4) + hexLower);\n      self._byte = -2;\n      self._lastPos = pos;\n    } else {\n      // Only one hex character was available in this chunk\n      self._byte = hexUpper;\n    }\n  } else {\n    // We saw only one hex character so far\n    const hexLower = HEX_VALUES[chunk[pos++]];\n    if (hexLower === -1) return -1;\n    if (self._inKey) self._key += String.fromCharCode((self._byte << 4) + hexLower);else self._val += String.fromCharCode((self._byte << 4) + hexLower);\n    self._byte = -2;\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipKeyBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesKey > self.fieldNameSizeLimit) {\n    if (!self._keyTrunc) {\n      if (self._lastPos < pos) self._key += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n\n    self._keyTrunc = true;\n\n    for (; pos < len; ++pos) {\n      const code = chunk[pos];\n      if (code === 61\n      /* '=' */\n      || code === 38\n      /* '&' */\n      ) break;\n      ++self._bytesKey;\n    }\n\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipValBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesVal > self.fieldSizeLimit) {\n    if (!self._valTrunc) {\n      if (self._lastPos < pos) self._val += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n\n    self._valTrunc = true;\n\n    for (; pos < len; ++pos) {\n      if (chunk[pos] === 38\n      /* '&' */\n      ) break;\n      ++self._bytesVal;\n    }\n\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n/* eslint-disable no-multi-spaces */\n\n\nconst HEX_VALUES = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = URLEncoded;","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/node_modules/busboy/lib/types/urlencoded.js"],"names":["Writable","require","getDecoder","URLEncoded","constructor","cfg","streamOpts","autoDestroy","emitClose","highWaterMark","undefined","charset","defCharset","conType","params","limits","fieldSizeLimit","fieldSize","fieldsLimit","fields","Infinity","fieldNameSizeLimit","fieldNameSize","_inKey","_keyTrunc","_valTrunc","_bytesKey","_bytesVal","_fields","_key","_val","_byte","_lastPos","_encode","_decoder","detect","type","subtype","_write","chunk","enc","cb","i","len","length","readPctEnc","Error","main","skipKeyBytes","latin1Slice","emit","nameTruncated","valueTruncated","encoding","mimeType","skipValBytes","_final","self","pos","hexUpper","HEX_VALUES","hexLower","String","fromCharCode","code","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst { Writable } = require('stream');\n\nconst { getDecoder } = require('../utils.js');\n\nclass URLEncoded extends Writable {\n  constructor(cfg) {\n    const streamOpts = {\n      autoDestroy: true,\n      emitClose: true,\n      highWaterMark: (typeof cfg.highWaterMark === 'number'\n                      ? cfg.highWaterMark\n                      : undefined),\n    };\n    super(streamOpts);\n\n    let charset = (cfg.defCharset || 'utf8');\n    if (cfg.conType.params && typeof cfg.conType.params.charset === 'string')\n      charset = cfg.conType.params.charset;\n\n    this.charset = charset;\n\n    const limits = cfg.limits;\n    this.fieldSizeLimit = (limits && typeof limits.fieldSize === 'number'\n                           ? limits.fieldSize\n                           : 1 * 1024 * 1024);\n    this.fieldsLimit = (limits && typeof limits.fields === 'number'\n                        ? limits.fields\n                        : Infinity);\n    this.fieldNameSizeLimit = (\n      limits && typeof limits.fieldNameSize === 'number'\n      ? limits.fieldNameSize\n      : 100\n    );\n\n    this._inKey = true;\n    this._keyTrunc = false;\n    this._valTrunc = false;\n    this._bytesKey = 0;\n    this._bytesVal = 0;\n    this._fields = 0;\n    this._key = '';\n    this._val = '';\n    this._byte = -2;\n    this._lastPos = 0;\n    this._encode = 0;\n    this._decoder = getDecoder(charset);\n  }\n\n  static detect(conType) {\n    return (conType.type === 'application'\n            && conType.subtype === 'x-www-form-urlencoded');\n  }\n\n  _write(chunk, enc, cb) {\n    if (this._fields >= this.fieldsLimit)\n      return cb();\n\n    let i = 0;\n    const len = chunk.length;\n    this._lastPos = 0;\n\n    // Check if we last ended mid-percent-encoded byte\n    if (this._byte !== -2) {\n      i = readPctEnc(this, chunk, i, len);\n      if (i === -1)\n        return cb(new Error('Malformed urlencoded form'));\n      if (i >= len)\n        return cb();\n      if (this._inKey)\n        ++this._bytesKey;\n      else\n        ++this._bytesVal;\n    }\n\nmain:\n    while (i < len) {\n      if (this._inKey) {\n        // Parsing key\n\n        i = skipKeyBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 61: // '='\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              this._inKey = false;\n              continue main;\n            case 38: // '&'\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._key = this._decoder(this._key, this._encode);\n              this._encode = 0;\n              if (this._bytesKey > 0) {\n                this.emit(\n                  'field',\n                  this._key,\n                  '',\n                  { nameTruncated: this._keyTrunc,\n                    valueTruncated: false,\n                    encoding: this.charset,\n                    mimeType: 'text/plain' }\n                );\n              }\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n              continue;\n            case 43: // '+'\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._key += ' ';\n              this._lastPos = i + 1;\n              break;\n            case 37: // '%'\n              if (this._encode === 0)\n                this._encode = 1;\n              if (this._lastPos < i)\n                this._key += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1)\n                return cb(new Error('Malformed urlencoded form'));\n              if (i >= len)\n                return cb();\n              ++this._bytesKey;\n              i = skipKeyBytes(this, chunk, i, len);\n              continue;\n          }\n          ++i;\n          ++this._bytesKey;\n          i = skipKeyBytes(this, chunk, i, len);\n        }\n        if (this._lastPos < i)\n          this._key += chunk.latin1Slice(this._lastPos, i);\n      } else {\n        // Parsing value\n\n        i = skipValBytes(this, chunk, i, len);\n\n        while (i < len) {\n          switch (chunk[i]) {\n            case 38: // '&'\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = ++i;\n              this._inKey = true;\n              this._val = this._decoder(this._val, this._encode);\n              this._encode = 0;\n              if (this._bytesKey > 0 || this._bytesVal > 0) {\n                this.emit(\n                  'field',\n                  this._key,\n                  this._val,\n                  { nameTruncated: this._keyTrunc,\n                    valueTruncated: this._valTrunc,\n                    encoding: this.charset,\n                    mimeType: 'text/plain' }\n                );\n              }\n              this._key = '';\n              this._val = '';\n              this._keyTrunc = false;\n              this._valTrunc = false;\n              this._bytesKey = 0;\n              this._bytesVal = 0;\n              if (++this._fields >= this.fieldsLimit) {\n                this.emit('fieldsLimit');\n                return cb();\n              }\n              continue main;\n            case 43: // '+'\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._val += ' ';\n              this._lastPos = i + 1;\n              break;\n            case 37: // '%'\n              if (this._encode === 0)\n                this._encode = 1;\n              if (this._lastPos < i)\n                this._val += chunk.latin1Slice(this._lastPos, i);\n              this._lastPos = i + 1;\n              this._byte = -1;\n              i = readPctEnc(this, chunk, i + 1, len);\n              if (i === -1)\n                return cb(new Error('Malformed urlencoded form'));\n              if (i >= len)\n                return cb();\n              ++this._bytesVal;\n              i = skipValBytes(this, chunk, i, len);\n              continue;\n          }\n          ++i;\n          ++this._bytesVal;\n          i = skipValBytes(this, chunk, i, len);\n        }\n        if (this._lastPos < i)\n          this._val += chunk.latin1Slice(this._lastPos, i);\n      }\n    }\n\n    cb();\n  }\n\n  _final(cb) {\n    if (this._byte !== -2)\n      return cb(new Error('Malformed urlencoded form'));\n    if (!this._inKey || this._bytesKey > 0 || this._bytesVal > 0) {\n      if (this._inKey)\n        this._key = this._decoder(this._key, this._encode);\n      else\n        this._val = this._decoder(this._val, this._encode);\n      this.emit(\n        'field',\n        this._key,\n        this._val,\n        { nameTruncated: this._keyTrunc,\n          valueTruncated: this._valTrunc,\n          encoding: this.charset,\n          mimeType: 'text/plain' }\n      );\n    }\n    cb();\n  }\n}\n\nfunction readPctEnc(self, chunk, pos, len) {\n  if (pos >= len)\n    return len;\n\n  if (self._byte === -1) {\n    // We saw a '%' but no hex characters yet\n    const hexUpper = HEX_VALUES[chunk[pos++]];\n    if (hexUpper === -1)\n      return -1;\n\n    if (hexUpper >= 8)\n      self._encode = 2; // Indicate high bits detected\n\n    if (pos < len) {\n      // Both hex characters are in this chunk\n      const hexLower = HEX_VALUES[chunk[pos++]];\n      if (hexLower === -1)\n        return -1;\n\n      if (self._inKey)\n        self._key += String.fromCharCode((hexUpper << 4) + hexLower);\n      else\n        self._val += String.fromCharCode((hexUpper << 4) + hexLower);\n\n      self._byte = -2;\n      self._lastPos = pos;\n    } else {\n      // Only one hex character was available in this chunk\n      self._byte = hexUpper;\n    }\n  } else {\n    // We saw only one hex character so far\n    const hexLower = HEX_VALUES[chunk[pos++]];\n    if (hexLower === -1)\n      return -1;\n\n    if (self._inKey)\n      self._key += String.fromCharCode((self._byte << 4) + hexLower);\n    else\n      self._val += String.fromCharCode((self._byte << 4) + hexLower);\n\n    self._byte = -2;\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipKeyBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesKey > self.fieldNameSizeLimit) {\n    if (!self._keyTrunc) {\n      if (self._lastPos < pos)\n        self._key += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n    self._keyTrunc = true;\n    for (; pos < len; ++pos) {\n      const code = chunk[pos];\n      if (code === 61/* '=' */ || code === 38/* '&' */)\n        break;\n      ++self._bytesKey;\n    }\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\nfunction skipValBytes(self, chunk, pos, len) {\n  // Skip bytes if we've truncated\n  if (self._bytesVal > self.fieldSizeLimit) {\n    if (!self._valTrunc) {\n      if (self._lastPos < pos)\n        self._val += chunk.latin1Slice(self._lastPos, pos - 1);\n    }\n    self._valTrunc = true;\n    for (; pos < len; ++pos) {\n      if (chunk[pos] === 38/* '&' */)\n        break;\n      ++self._bytesVal;\n    }\n    self._lastPos = pos;\n  }\n\n  return pos;\n}\n\n/* eslint-disable no-multi-spaces */\nconst HEX_VALUES = [\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n];\n/* eslint-enable no-multi-spaces */\n\nmodule.exports = URLEncoded;\n"]},"metadata":{},"sourceType":"script"}