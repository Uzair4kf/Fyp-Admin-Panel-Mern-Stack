{"ast":null,"code":"/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nexport class WorkboxEventTarget {\n  constructor() {\n    this._eventListenerRegistry = new Map();\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n\n\n  addEventListener(type, listener) {\n    const foo = this._getEventListenersByType(type);\n\n    foo.add(listener);\n  }\n  /**\n   * @param {string} type\n   * @param {Function} listener\n   * @private\n   */\n\n\n  removeEventListener(type, listener) {\n    this._getEventListenersByType(type).delete(listener);\n  }\n  /**\n   * @param {Object} event\n   * @private\n   */\n\n\n  dispatchEvent(event) {\n    event.target = this;\n\n    const listeners = this._getEventListenersByType(event.type);\n\n    for (const listener of listeners) {\n      listener(event);\n    }\n  }\n  /**\n   * Returns a Set of listeners associated with the passed event type.\n   * If no handlers have been registered, an empty Set is returned.\n   *\n   * @param {string} type The event type.\n   * @return {Set<ListenerCallback>} An array of handler functions.\n   * @private\n   */\n\n\n  _getEventListenersByType(type) {\n    if (!this._eventListenerRegistry.has(type)) {\n      this._eventListenerRegistry.set(type, new Set());\n    }\n\n    return this._eventListenerRegistry.get(type);\n  }\n\n}","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-window/utils/WorkboxEventTarget.js"],"names":["WorkboxEventTarget","constructor","_eventListenerRegistry","Map","addEventListener","type","listener","foo","_getEventListenersByType","add","removeEventListener","delete","dispatchEvent","event","target","listeners","has","set","Set","get"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAN,CAAyB;AAC5BC,EAAAA,WAAW,GAAG;AACV,SAAKC,sBAAL,GAA8B,IAAIC,GAAJ,EAA9B;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,gBAAgB,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC7B,UAAMC,GAAG,GAAG,KAAKC,wBAAL,CAA8BH,IAA9B,CAAZ;;AACAE,IAAAA,GAAG,CAACE,GAAJ,CAAQH,QAAR;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,mBAAmB,CAACL,IAAD,EAAOC,QAAP,EAAiB;AAChC,SAAKE,wBAAL,CAA8BH,IAA9B,EAAoCM,MAApC,CAA2CL,QAA3C;AACH;AACD;AACJ;AACA;AACA;;;AACIM,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACjBA,IAAAA,KAAK,CAACC,MAAN,GAAe,IAAf;;AACA,UAAMC,SAAS,GAAG,KAAKP,wBAAL,CAA8BK,KAAK,CAACR,IAApC,CAAlB;;AACA,SAAK,MAAMC,QAAX,IAAuBS,SAAvB,EAAkC;AAC9BT,MAAAA,QAAQ,CAACO,KAAD,CAAR;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIL,EAAAA,wBAAwB,CAACH,IAAD,EAAO;AAC3B,QAAI,CAAC,KAAKH,sBAAL,CAA4Bc,GAA5B,CAAgCX,IAAhC,CAAL,EAA4C;AACxC,WAAKH,sBAAL,CAA4Be,GAA5B,CAAgCZ,IAAhC,EAAsC,IAAIa,GAAJ,EAAtC;AACH;;AACD,WAAO,KAAKhB,sBAAL,CAA4BiB,GAA5B,CAAgCd,IAAhC,CAAP;AACH;;AA7C2B","sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nexport class WorkboxEventTarget {\n    constructor() {\n        this._eventListenerRegistry = new Map();\n    }\n    /**\n     * @param {string} type\n     * @param {Function} listener\n     * @private\n     */\n    addEventListener(type, listener) {\n        const foo = this._getEventListenersByType(type);\n        foo.add(listener);\n    }\n    /**\n     * @param {string} type\n     * @param {Function} listener\n     * @private\n     */\n    removeEventListener(type, listener) {\n        this._getEventListenersByType(type).delete(listener);\n    }\n    /**\n     * @param {Object} event\n     * @private\n     */\n    dispatchEvent(event) {\n        event.target = this;\n        const listeners = this._getEventListenersByType(event.type);\n        for (const listener of listeners) {\n            listener(event);\n        }\n    }\n    /**\n     * Returns a Set of listeners associated with the passed event type.\n     * If no handlers have been registered, an empty Set is returned.\n     *\n     * @param {string} type The event type.\n     * @return {Set<ListenerCallback>} An array of handler functions.\n     * @private\n     */\n    _getEventListenersByType(type) {\n        if (!this._eventListenerRegistry.has(type)) {\n            this._eventListenerRegistry.set(type, new Set());\n        }\n        return this._eventListenerRegistry.get(type);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}