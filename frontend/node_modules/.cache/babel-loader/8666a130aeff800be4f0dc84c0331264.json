{"ast":null,"code":"var sys = require(\"util\"),\n    assert = require(\"assert\"),\n    XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest,\n    http = require(\"http\"),\n    xhr; // Test server\n\n\nvar server = http.createServer(function (req, res) {\n  // Check request method and URL\n  assert.equal(methods[curMethod], req.method);\n  assert.equal(\"/\" + methods[curMethod], req.url);\n  var body = req.method != \"HEAD\" ? \"Hello World\" : \"\";\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body)\n  }); // HEAD has no body\n\n  if (req.method != \"HEAD\") {\n    res.write(body);\n  }\n\n  res.end();\n\n  if (curMethod == methods.length - 1) {\n    this.close();\n    console.log(\"done\");\n  }\n}).listen(8000); // Test standard methods\n\nvar methods = [\"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\"];\nvar curMethod = 0;\n\nfunction start(method) {\n  // Reset each time\n  xhr = new XMLHttpRequest();\n\n  xhr.onreadystatechange = function () {\n    if (this.readyState == 4) {\n      if (method == \"HEAD\") {\n        assert.equal(\"\", this.responseText);\n      } else {\n        assert.equal(\"Hello World\", this.responseText);\n      }\n\n      curMethod++;\n\n      if (curMethod < methods.length) {\n        console.log(\"Testing \" + methods[curMethod]);\n        start(methods[curMethod]);\n      }\n    }\n  };\n\n  var url = \"http://localhost:8000/\" + method;\n  xhr.open(method, url);\n  xhr.send();\n}\n\nconsole.log(\"Testing \" + methods[curMethod]);\nstart(methods[curMethod]);","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/xmlhttprequest-ssl/tests/test-request-methods.js"],"names":["sys","require","assert","XMLHttpRequest","http","xhr","server","createServer","req","res","equal","methods","curMethod","method","url","body","writeHead","Buffer","byteLength","write","end","length","close","console","log","listen","start","onreadystatechange","readyState","responseText","open","send"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAjB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAAA,IAEIE,cAAc,GAAGF,OAAO,CAAC,uBAAD,CAAP,CAAiCE,cAFtD;AAAA,IAGIC,IAAI,GAAGH,OAAO,CAAC,MAAD,CAHlB;AAAA,IAIII,GAJJ,C,CAMA;;;AACA,IAAIC,MAAM,GAAGF,IAAI,CAACG,YAAL,CAAkB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACjD;AACAP,EAAAA,MAAM,CAACQ,KAAP,CAAaC,OAAO,CAACC,SAAD,CAApB,EAAiCJ,GAAG,CAACK,MAArC;AACAX,EAAAA,MAAM,CAACQ,KAAP,CAAa,MAAMC,OAAO,CAACC,SAAD,CAA1B,EAAuCJ,GAAG,CAACM,GAA3C;AAEA,MAAIC,IAAI,GAAIP,GAAG,CAACK,MAAJ,IAAc,MAAd,GAAuB,aAAvB,GAAuC,EAAnD;AAEAJ,EAAAA,GAAG,CAACO,SAAJ,CAAc,GAAd,EAAmB;AACjB,oBAAgB,YADC;AAEjB,sBAAkBC,MAAM,CAACC,UAAP,CAAkBH,IAAlB;AAFD,GAAnB,EAPiD,CAWjD;;AACA,MAAIP,GAAG,CAACK,MAAJ,IAAc,MAAlB,EAA0B;AACxBJ,IAAAA,GAAG,CAACU,KAAJ,CAAUJ,IAAV;AACD;;AACDN,EAAAA,GAAG,CAACW,GAAJ;;AAEA,MAAIR,SAAS,IAAID,OAAO,CAACU,MAAR,GAAiB,CAAlC,EAAqC;AACnC,SAAKC,KAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;AACF,CArBY,EAqBVC,MArBU,CAqBH,IArBG,CAAb,C,CAuBA;;AACA,IAAId,OAAO,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,QAA/B,CAAd;AACA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,SAASc,KAAT,CAAeb,MAAf,EAAuB;AACrB;AACAR,EAAAA,GAAG,GAAG,IAAIF,cAAJ,EAAN;;AAEAE,EAAAA,GAAG,CAACsB,kBAAJ,GAAyB,YAAW;AAClC,QAAI,KAAKC,UAAL,IAAmB,CAAvB,EAA0B;AACxB,UAAIf,MAAM,IAAI,MAAd,EAAsB;AACpBX,QAAAA,MAAM,CAACQ,KAAP,CAAa,EAAb,EAAiB,KAAKmB,YAAtB;AACD,OAFD,MAEO;AACL3B,QAAAA,MAAM,CAACQ,KAAP,CAAa,aAAb,EAA4B,KAAKmB,YAAjC;AACD;;AAEDjB,MAAAA,SAAS;;AAET,UAAIA,SAAS,GAAGD,OAAO,CAACU,MAAxB,EAAgC;AAC9BE,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAab,OAAO,CAACC,SAAD,CAAhC;AACAc,QAAAA,KAAK,CAACf,OAAO,CAACC,SAAD,CAAR,CAAL;AACD;AACF;AACF,GAfD;;AAiBA,MAAIE,GAAG,GAAG,2BAA2BD,MAArC;AACAR,EAAAA,GAAG,CAACyB,IAAJ,CAASjB,MAAT,EAAiBC,GAAjB;AACAT,EAAAA,GAAG,CAAC0B,IAAJ;AACD;;AAEDR,OAAO,CAACC,GAAR,CAAY,aAAab,OAAO,CAACC,SAAD,CAAhC;AACAc,KAAK,CAACf,OAAO,CAACC,SAAD,CAAR,CAAL","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , http = require(\"http\")\n  , xhr;\n\n// Test server\nvar server = http.createServer(function (req, res) {\n  // Check request method and URL\n  assert.equal(methods[curMethod], req.method);\n  assert.equal(\"/\" + methods[curMethod], req.url);\n\n  var body = (req.method != \"HEAD\" ? \"Hello World\" : \"\");\n\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body)\n  });\n  // HEAD has no body\n  if (req.method != \"HEAD\") {\n    res.write(body);\n  }\n  res.end();\n\n  if (curMethod == methods.length - 1) {\n    this.close();\n    console.log(\"done\");\n  }\n}).listen(8000);\n\n// Test standard methods\nvar methods = [\"GET\", \"POST\", \"HEAD\", \"PUT\", \"DELETE\"];\nvar curMethod = 0;\n\nfunction start(method) {\n  // Reset each time\n  xhr = new XMLHttpRequest();\n\n  xhr.onreadystatechange = function() {\n    if (this.readyState == 4) {\n      if (method == \"HEAD\") {\n        assert.equal(\"\", this.responseText);\n      } else {\n        assert.equal(\"Hello World\", this.responseText);\n      }\n\n      curMethod++;\n\n      if (curMethod < methods.length) {\n        console.log(\"Testing \" + methods[curMethod]);\n        start(methods[curMethod]);\n      }\n    }\n  };\n\n  var url = \"http://localhost:8000/\" + method;\n  xhr.open(method, url);\n  xhr.send();\n}\n\nconsole.log(\"Testing \" + methods[curMethod]);\nstart(methods[curMethod]);\n"]},"metadata":{},"sourceType":"script"}