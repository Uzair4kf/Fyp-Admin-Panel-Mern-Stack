{"ast":null,"code":"import Product from \"../models/productModel.js\";\n\nconst getProducts = async (req, res) => {\n  const products = await Product.find({});\n  res.json(products);\n};\n\nconst getProductById = async (req, res) => {\n  const product = await Product.findById(req.params.id);\n\n  if (product) {\n    res.json(product);\n  } else {\n    res.status(404).json({\n      message: \"Product not found\"\n    });\n  }\n};\n\nconst deleteProduct = async (req, res) => {\n  const product = await Product.findById(req.params.id);\n\n  if (product) {\n    await product.remove();\n    res.json({\n      message: \"Product removed\"\n    });\n  } else {\n    res.status(404).json({\n      message: \"Product not found\"\n    });\n  }\n};\n\nconst createProduct = async (req, res) => {\n  const product = new Product({\n    name: \"Sample name\",\n    price: 100,\n    image: \"../data/7.jpg\",\n    brand: \"Sample brand\",\n    rating: 2,\n    category: \"Sample category\",\n    countInStock: 0,\n    numReviews: 0,\n    description: \"Sample description\"\n  });\n  const createdProduct = await product.save();\n  res.status(201).json(createdProduct);\n};\n\nconst updateProduct = async (req, res) => {\n  var _req$params;\n\n  const {\n    name,\n    price,\n    description,\n    category,\n    quantity,\n    image\n  } = req.body;\n  const product = await Product.findById((_req$params = req.params) === null || _req$params === void 0 ? void 0 : _req$params.id);\n  console.log(req.params.id);\n\n  if (product) {\n    product.name = name;\n    product.price = price;\n    product.description = description;\n    product.category = category;\n    product.quantity = quantity;\n    product.image = image;\n    console.log(\"image :\", image);\n  } else {\n    res.status(400);\n    throw new Error(\"Product error\");\n  }\n\n  const updatedProduct = await product.save();\n  console.log(updatedProduct);\n  res.json(updatedProduct);\n}; // const updateProduct = async (req, res) => {\n//   const price = req.body?.price;\n//   const description = req.body?.description;\n//   const name = req.body?.name;\n//   const category = req.body?.category;\n//   const product = await Product.findById(req.params?.id);\n// console.log(req.params?.id)\n//   if (product) {\n//     product.name = name;\n//     product.price = price;\n//     product.description = description;\n//     product.category = category;\n//   } else {\n//     res.status(400);\n//     throw new Error(\"Product error\");\n//   }\n//   const updatedProduct = await product.save();\n//   res.json(updatedProduct);\n// };\n\n\nexport { getProducts, getProductById, deleteProduct, createProduct, updateProduct };","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/backend/controllers/productControllers.js"],"names":["Product","getProducts","req","res","products","find","json","getProductById","product","findById","params","id","status","message","deleteProduct","remove","createProduct","name","price","image","brand","rating","category","countInStock","numReviews","description","createdProduct","save","updateProduct","quantity","body","console","log","Error","updatedProduct"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,2BAApB;;AAEA,MAAMC,WAAW,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACtC,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,IAAR,CAAa,EAAb,CAAvB;AAEAF,EAAAA,GAAG,CAACG,IAAJ,CAASF,QAAT;AACD,CAJD;;AAMA,MAAMG,cAAc,GAAG,OAAOL,GAAP,EAAYC,GAAZ,KAAoB;AACzC,QAAMK,OAAO,GAAG,MAAMR,OAAO,CAACS,QAAR,CAAiBP,GAAG,CAACQ,MAAJ,CAAWC,EAA5B,CAAtB;;AACA,MAAIH,OAAJ,EAAa;AACXL,IAAAA,GAAG,CAACG,IAAJ,CAASE,OAAT;AACD,GAFD,MAEO;AACLL,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF,CAPD;;AASA,MAAMC,aAAa,GAAG,OAAOZ,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAMK,OAAO,GAAG,MAAMR,OAAO,CAACS,QAAR,CAAiBP,GAAG,CAACQ,MAAJ,CAAWC,EAA5B,CAAtB;;AACA,MAAIH,OAAJ,EAAa;AACX,UAAMA,OAAO,CAACO,MAAR,EAAN;AACAZ,IAAAA,GAAG,CAACG,IAAJ,CAAS;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAAT;AACD,GAHD,MAGO;AACLV,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAArB;AACD;AACF,CARD;;AASA,MAAMG,aAAa,GAAG,OAAOd,GAAP,EAAYC,GAAZ,KAAoB;AACxC,QAAMK,OAAO,GAAG,IAAIR,OAAJ,CAAY;AAC1BiB,IAAAA,IAAI,EAAE,aADoB;AAE1BC,IAAAA,KAAK,EAAE,GAFmB;AAG1BC,IAAAA,KAAK,EAAE,eAHmB;AAI1BC,IAAAA,KAAK,EAAE,cAJmB;AAK1BC,IAAAA,MAAM,EAAE,CALkB;AAM1BC,IAAAA,QAAQ,EAAE,iBANgB;AAO1BC,IAAAA,YAAY,EAAE,CAPY;AAQ1BC,IAAAA,UAAU,EAAE,CARc;AAS1BC,IAAAA,WAAW,EAAE;AATa,GAAZ,CAAhB;AAWA,QAAMC,cAAc,GAAG,MAAMlB,OAAO,CAACmB,IAAR,EAA7B;AAEAxB,EAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqBoB,cAArB;AACD,CAfD;;AAiBA,MAAME,aAAa,GAAG,OAAO1B,GAAP,EAAYC,GAAZ,KAAoB;AAAA;;AACxC,QAAM;AAAEc,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeO,IAAAA,WAAf;AAA4BH,IAAAA,QAA5B;AAAsCO,IAAAA,QAAtC;AAAgDV,IAAAA;AAAhD,MAA0DjB,GAAG,CAAC4B,IAApE;AACA,QAAMtB,OAAO,GAAG,MAAMR,OAAO,CAACS,QAAR,gBAAiBP,GAAG,CAACQ,MAArB,gDAAiB,YAAYC,EAA7B,CAAtB;AAEAoB,EAAAA,OAAO,CAACC,GAAR,CAAY9B,GAAG,CAACQ,MAAJ,CAAWC,EAAvB;;AACA,MAAIH,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACS,IAAR,GAAeA,IAAf;AACAT,IAAAA,OAAO,CAACU,KAAR,GAAgBA,KAAhB;AACAV,IAAAA,OAAO,CAACiB,WAAR,GAAsBA,WAAtB;AACAjB,IAAAA,OAAO,CAACc,QAAR,GAAmBA,QAAnB;AAEAd,IAAAA,OAAO,CAACqB,QAAR,GAAmBA,QAAnB;AACArB,IAAAA,OAAO,CAACW,KAAR,GAAgBA,KAAhB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBb,KAAvB;AACD,GATD,MASO;AACLhB,IAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX;AACA,UAAM,IAAIqB,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,QAAMC,cAAc,GAAG,MAAM1B,OAAO,CAACmB,IAAR,EAA7B;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYE,cAAZ;AACA/B,EAAAA,GAAG,CAACG,IAAJ,CAAS4B,cAAT;AACD,CAvBD,C,CAwBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACEjC,WADF,EAEEM,cAFF,EAGEO,aAHF,EAIEE,aAJF,EAKEY,aALF","sourcesContent":["import Product from \"../models/productModel.js\";\r\n\r\nconst getProducts = async (req, res) => {\r\n  const products = await Product.find({});\r\n\r\n  res.json(products);\r\n};\r\n\r\nconst getProductById = async (req, res) => {\r\n  const product = await Product.findById(req.params.id);\r\n  if (product) {\r\n    res.json(product);\r\n  } else {\r\n    res.status(404).json({ message: \"Product not found\" });\r\n  }\r\n};\r\n\r\nconst deleteProduct = async (req, res) => {\r\n  const product = await Product.findById(req.params.id);\r\n  if (product) {\r\n    await product.remove();\r\n    res.json({ message: \"Product removed\" });\r\n  } else {\r\n    res.status(404).json({ message: \"Product not found\" });\r\n  }\r\n};\r\nconst createProduct = async (req, res) => {\r\n  const product = new Product({\r\n    name: \"Sample name\",\r\n    price: 100,\r\n    image: \"../data/7.jpg\",\r\n    brand: \"Sample brand\",\r\n    rating: 2,\r\n    category: \"Sample category\",\r\n    countInStock: 0,\r\n    numReviews: 0,\r\n    description: \"Sample description\",\r\n  });\r\n  const createdProduct = await product.save();\r\n\r\n  res.status(201).json(createdProduct);\r\n};\r\n\r\nconst updateProduct = async (req, res) => {\r\n  const { name, price, description, category, quantity, image } = req.body;\r\n  const product = await Product.findById(req.params?.id);\r\n\r\n  console.log(req.params.id);\r\n  if (product) {\r\n    product.name = name;\r\n    product.price = price;\r\n    product.description = description;\r\n    product.category = category;\r\n\r\n    product.quantity = quantity;\r\n    product.image = image;\r\n    console.log(\"image :\", image);\r\n  } else {\r\n    res.status(400);\r\n    throw new Error(\"Product error\");\r\n  }\r\n\r\n  const updatedProduct = await product.save();\r\n\r\n  console.log(updatedProduct);\r\n  res.json(updatedProduct);\r\n};\r\n// const updateProduct = async (req, res) => {\r\n//   const price = req.body?.price;\r\n//   const description = req.body?.description;\r\n//   const name = req.body?.name;\r\n//   const category = req.body?.category;\r\n\r\n//   const product = await Product.findById(req.params?.id);\r\n// console.log(req.params?.id)\r\n//   if (product) {\r\n//     product.name = name;\r\n//     product.price = price;\r\n//     product.description = description;\r\n//     product.category = category;\r\n//   } else {\r\n//     res.status(400);\r\n//     throw new Error(\"Product error\");\r\n//   }\r\n//   const updatedProduct = await product.save();\r\n//   res.json(updatedProduct);\r\n// };\r\n\r\nexport {\r\n  getProducts,\r\n  getProductById,\r\n  deleteProduct,\r\n  createProduct,\r\n  updateProduct,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}