{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst sourceMapURL = require('source-map-url');\n\nconst upath = require('upath');\n/**\n * If our bundled swDest file contains a sourcemap, we would invalidate that\n * mapping if we just replaced injectionPoint with the stringified manifest.\n * Instead, we need to update the swDest contents as well as the sourcemap\n * at the same time.\n *\n * See https://github.com/GoogleChrome/workbox/issues/2235\n *\n * @param {Object} compilation The current webpack compilation.\n * @param {string} swContents The contents of the swSrc file, which may or\n * may not include a valid sourcemap comment.\n * @param {string} swDest The configured swDest value.\n * @return {string|undefined} If the swContents contains a valid soucemap\n * comment pointing to an asset present in the compilation, this will return the\n * name of that asset. Otherwise, it will return undefined.\n *\n * @private\n */\n\n\nmodule.exports = (compilation, swContents, swDest) => {\n  const url = sourceMapURL.getFrom(swContents);\n\n  if (url) {\n    // Translate the relative URL to what the presumed name for the webpack\n    // asset should be.\n    // This *might* not be a valid asset if the sourcemap URL that was found\n    // was added by another module incidentally.\n    // See https://github.com/GoogleChrome/workbox/issues/2250\n    const swAssetDirname = upath.dirname(swDest);\n    const sourcemapURLAssetName = upath.normalize(upath.join(swAssetDirname, url));\n\n    if (sourcemapURLAssetName in compilation.assets) {\n      return sourcemapURLAssetName;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-webpack-plugin/build/lib/get-sourcemap-asset-name.js"],"names":["sourceMapURL","require","upath","module","exports","compilation","swContents","swDest","url","getFrom","swAssetDirname","dirname","sourcemapURLAssetName","normalize","join","assets"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGAE,MAAM,CAACC,OAAP,GAAiB,CAACC,WAAD,EAAcC,UAAd,EAA0BC,MAA1B,KAAqC;AACpD,QAAMC,GAAG,GAAGR,YAAY,CAACS,OAAb,CAAqBH,UAArB,CAAZ;;AAEA,MAAIE,GAAJ,EAAS;AACP;AACA;AACA;AACA;AACA;AACA,UAAME,cAAc,GAAGR,KAAK,CAACS,OAAN,CAAcJ,MAAd,CAAvB;AACA,UAAMK,qBAAqB,GAAGV,KAAK,CAACW,SAAN,CAAgBX,KAAK,CAACY,IAAN,CAAWJ,cAAX,EAA2BF,GAA3B,CAAhB,CAA9B;;AAEA,QAAII,qBAAqB,IAAIP,WAAW,CAACU,MAAzC,EAAiD;AAC/C,aAAOH,qBAAP;AACD;AACF;AACF,CAhBD","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst sourceMapURL = require('source-map-url');\n\nconst upath = require('upath');\n/**\n * If our bundled swDest file contains a sourcemap, we would invalidate that\n * mapping if we just replaced injectionPoint with the stringified manifest.\n * Instead, we need to update the swDest contents as well as the sourcemap\n * at the same time.\n *\n * See https://github.com/GoogleChrome/workbox/issues/2235\n *\n * @param {Object} compilation The current webpack compilation.\n * @param {string} swContents The contents of the swSrc file, which may or\n * may not include a valid sourcemap comment.\n * @param {string} swDest The configured swDest value.\n * @return {string|undefined} If the swContents contains a valid soucemap\n * comment pointing to an asset present in the compilation, this will return the\n * name of that asset. Otherwise, it will return undefined.\n *\n * @private\n */\n\n\nmodule.exports = (compilation, swContents, swDest) => {\n  const url = sourceMapURL.getFrom(swContents);\n\n  if (url) {\n    // Translate the relative URL to what the presumed name for the webpack\n    // asset should be.\n    // This *might* not be a valid asset if the sourcemap URL that was found\n    // was added by another module incidentally.\n    // See https://github.com/GoogleChrome/workbox/issues/2250\n    const swAssetDirname = upath.dirname(swDest);\n    const sourcemapURLAssetName = upath.normalize(upath.join(swAssetDirname, url));\n\n    if (sourcemapURLAssetName in compilation.assets) {\n      return sourcemapURLAssetName;\n    }\n  }\n};"]},"metadata":{},"sourceType":"script"}