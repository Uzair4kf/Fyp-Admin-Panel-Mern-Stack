{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {Blob} blob A source blob.\n * @param {number} [start] The offset to use as the start of the\n * slice.\n * @param {number} [end] The offset to use as the end of the slice.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the effective boundaries to use given the size of the blob.\n *\n * @private\n */\n\nfunction calculateEffectiveBoundaries(blob, start, end) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isInstance(blob, Blob, {\n      moduleName: 'workbox-range-requests',\n      funcName: 'calculateEffectiveBoundaries',\n      paramName: 'blob'\n    });\n  }\n\n  const blobSize = blob.size;\n\n  if (end && end > blobSize || start && start < 0) {\n    throw new WorkboxError('range-not-satisfiable', {\n      size: blobSize,\n      end,\n      start\n    });\n  }\n\n  let effectiveStart;\n  let effectiveEnd;\n\n  if (start !== undefined && end !== undefined) {\n    effectiveStart = start; // Range values are inclusive, so add 1 to the value.\n\n    effectiveEnd = end + 1;\n  } else if (start !== undefined && end === undefined) {\n    effectiveStart = start;\n    effectiveEnd = blobSize;\n  } else if (end !== undefined && start === undefined) {\n    effectiveStart = blobSize - end;\n    effectiveEnd = blobSize;\n  }\n\n  return {\n    start: effectiveStart,\n    end: effectiveEnd\n  };\n}\n\nexport { calculateEffectiveBoundaries };","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-range-requests/utils/calculateEffectiveBoundaries.js"],"names":["WorkboxError","assert","calculateEffectiveBoundaries","blob","start","end","process","env","NODE_ENV","isInstance","Blob","moduleName","funcName","paramName","blobSize","size","effectiveStart","effectiveEnd","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uCAA7B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,4BAAT,CAAsCC,IAAtC,EAA4CC,KAA5C,EAAmDC,GAAnD,EAAwD;AACpD,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCP,IAAAA,MAAM,CAACQ,UAAP,CAAkBN,IAAlB,EAAwBO,IAAxB,EAA8B;AAC1BC,MAAAA,UAAU,EAAE,wBADc;AAE1BC,MAAAA,QAAQ,EAAE,8BAFgB;AAG1BC,MAAAA,SAAS,EAAE;AAHe,KAA9B;AAKH;;AACD,QAAMC,QAAQ,GAAGX,IAAI,CAACY,IAAtB;;AACA,MAAKV,GAAG,IAAIA,GAAG,GAAGS,QAAd,IAA4BV,KAAK,IAAIA,KAAK,GAAG,CAAjD,EAAqD;AACjD,UAAM,IAAIJ,YAAJ,CAAiB,uBAAjB,EAA0C;AAC5Ce,MAAAA,IAAI,EAAED,QADsC;AAE5CT,MAAAA,GAF4C;AAG5CD,MAAAA;AAH4C,KAA1C,CAAN;AAKH;;AACD,MAAIY,cAAJ;AACA,MAAIC,YAAJ;;AACA,MAAIb,KAAK,KAAKc,SAAV,IAAuBb,GAAG,KAAKa,SAAnC,EAA8C;AAC1CF,IAAAA,cAAc,GAAGZ,KAAjB,CAD0C,CAE1C;;AACAa,IAAAA,YAAY,GAAGZ,GAAG,GAAG,CAArB;AACH,GAJD,MAKK,IAAID,KAAK,KAAKc,SAAV,IAAuBb,GAAG,KAAKa,SAAnC,EAA8C;AAC/CF,IAAAA,cAAc,GAAGZ,KAAjB;AACAa,IAAAA,YAAY,GAAGH,QAAf;AACH,GAHI,MAIA,IAAIT,GAAG,KAAKa,SAAR,IAAqBd,KAAK,KAAKc,SAAnC,EAA8C;AAC/CF,IAAAA,cAAc,GAAGF,QAAQ,GAAGT,GAA5B;AACAY,IAAAA,YAAY,GAAGH,QAAf;AACH;;AACD,SAAO;AACHV,IAAAA,KAAK,EAAEY,cADJ;AAEHX,IAAAA,GAAG,EAAEY;AAFF,GAAP;AAIH;;AACD,SAASf,4BAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {Blob} blob A source blob.\n * @param {number} [start] The offset to use as the start of the\n * slice.\n * @param {number} [end] The offset to use as the end of the slice.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the effective boundaries to use given the size of the blob.\n *\n * @private\n */\nfunction calculateEffectiveBoundaries(blob, start, end) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(blob, Blob, {\n            moduleName: 'workbox-range-requests',\n            funcName: 'calculateEffectiveBoundaries',\n            paramName: 'blob',\n        });\n    }\n    const blobSize = blob.size;\n    if ((end && end > blobSize) || (start && start < 0)) {\n        throw new WorkboxError('range-not-satisfiable', {\n            size: blobSize,\n            end,\n            start,\n        });\n    }\n    let effectiveStart;\n    let effectiveEnd;\n    if (start !== undefined && end !== undefined) {\n        effectiveStart = start;\n        // Range values are inclusive, so add 1 to the value.\n        effectiveEnd = end + 1;\n    }\n    else if (start !== undefined && end === undefined) {\n        effectiveStart = start;\n        effectiveEnd = blobSize;\n    }\n    else if (end !== undefined && start === undefined) {\n        effectiveStart = blobSize - end;\n        effectiveEnd = blobSize;\n    }\n    return {\n        start: effectiveStart,\n        end: effectiveEnd,\n    };\n}\nexport { calculateEffectiveBoundaries };\n"]},"metadata":{},"sourceType":"module"}