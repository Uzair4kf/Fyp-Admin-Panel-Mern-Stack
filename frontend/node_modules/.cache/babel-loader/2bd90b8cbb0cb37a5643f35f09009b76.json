{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { createPartialResponse } from './createPartialResponse.js';\nimport './_version.js';\n/**\n * The range request plugin makes it easy for a request with a 'Range' header to\n * be fulfilled by a cached response.\n *\n * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n * and returning the appropriate subset of the cached response body.\n *\n * @memberof module:workbox-range-requests\n */\n\nclass RangeRequestsPlugin {\n  constructor() {\n    /**\n     * @param {Object} options\n     * @param {Request} options.request The original request, which may or may not\n     * contain a Range: header.\n     * @param {Response} options.cachedResponse The complete cached response.\n     * @return {Promise<Response>} If request contains a 'Range' header, then a\n     * new response with status 206 whose body is a subset of `cachedResponse` is\n     * returned. Otherwise, `cachedResponse` is returned as-is.\n     *\n     * @private\n     */\n    this.cachedResponseWillBeUsed = async ({\n      request,\n      cachedResponse\n    }) => {\n      // Only return a sliced response if there's something valid in the cache,\n      // and there's a Range: header in the request.\n      if (cachedResponse && request.headers.has('range')) {\n        return await createPartialResponse(request, cachedResponse);\n      } // If there was no Range: header, or if cachedResponse wasn't valid, just\n      // pass it through as-is.\n\n\n      return cachedResponse;\n    };\n  }\n\n}\n\nexport { RangeRequestsPlugin };","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-range-requests/RangeRequestsPlugin.js"],"names":["createPartialResponse","RangeRequestsPlugin","constructor","cachedResponseWillBeUsed","request","cachedResponse","headers","has"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,qBAAT,QAAsC,4BAAtC;AACA,OAAO,eAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,GAAG;AACV;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,SAAKC,wBAAL,GAAgC,OAAO;AAAEC,MAAAA,OAAF;AAAWC,MAAAA;AAAX,KAAP,KAAuC;AACnE;AACA;AACA,UAAIA,cAAc,IAAID,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoB,OAApB,CAAtB,EAAoD;AAChD,eAAO,MAAMP,qBAAqB,CAACI,OAAD,EAAUC,cAAV,CAAlC;AACH,OALkE,CAMnE;AACA;;;AACA,aAAOA,cAAP;AACH,KATD;AAUH;;AAvBqB;;AAyB1B,SAASJ,mBAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { createPartialResponse } from './createPartialResponse.js';\nimport './_version.js';\n/**\n * The range request plugin makes it easy for a request with a 'Range' header to\n * be fulfilled by a cached response.\n *\n * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n * and returning the appropriate subset of the cached response body.\n *\n * @memberof module:workbox-range-requests\n */\nclass RangeRequestsPlugin {\n    constructor() {\n        /**\n         * @param {Object} options\n         * @param {Request} options.request The original request, which may or may not\n         * contain a Range: header.\n         * @param {Response} options.cachedResponse The complete cached response.\n         * @return {Promise<Response>} If request contains a 'Range' header, then a\n         * new response with status 206 whose body is a subset of `cachedResponse` is\n         * returned. Otherwise, `cachedResponse` is returned as-is.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ request, cachedResponse }) => {\n            // Only return a sliced response if there's something valid in the cache,\n            // and there's a Range: header in the request.\n            if (cachedResponse && request.headers.has('range')) {\n                return await createPartialResponse(request, cachedResponse);\n            }\n            // If there was no Range: header, or if cachedResponse wasn't valid, just\n            // pass it through as-is.\n            return cachedResponse;\n        };\n    }\n}\nexport { RangeRequestsPlugin };\n"]},"metadata":{},"sourceType":"module"}