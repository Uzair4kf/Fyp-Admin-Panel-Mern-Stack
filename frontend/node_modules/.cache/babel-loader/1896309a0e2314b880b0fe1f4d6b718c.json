{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst {\n  RawSource\n} = require('webpack-sources');\n\nconst bundle = require('workbox-build/build/lib/bundle');\n\nconst populateSWTemplate = require('workbox-build/build/lib/populate-sw-template');\n\nconst validate = require('workbox-build/build/lib/validate-options');\n\nconst webpackGenerateSWSchema = require('workbox-build/build/options/schema/webpack-generate-sw');\n\nconst getScriptFilesForChunks = require('./lib/get-script-files-for-chunks');\n\nconst getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');\n\nconst relativeToOutputPath = require('./lib/relative-to-output-path'); // Used to keep track of swDest files written by *any* instance of this plugin.\n// See https://github.com/GoogleChrome/workbox/issues/2181\n\n\nconst _generatedAssetNames = new Set();\n/**\n * This class supports creating a new, ready-to-use service worker file as\n * part of the webpack compilation process.\n *\n * Use an instance of `GenerateSW` in the\n * [`plugins` array](https://webpack.js.org/concepts/plugins/#usage) of a\n * webpack config.\n *\n * @memberof module:workbox-webpack-plugin\n */\n\n\nclass GenerateSW {\n  // eslint-disable-next-line jsdoc/newline-after-description\n\n  /**\n   * Creates an instance of GenerateSW.\n   *\n   * @param {Object} config The configuration to use.\n   *\n   * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]\n   * A list of entries to be precached, in addition to any entries that are\n   * generated as part of the build configuration.\n   *\n   * @param {Array<string>} [config.babelPresetEnvTargets=['chrome >= 56']]\n   * The [targets](https://babeljs.io/docs/en/babel-preset-env#targets) to pass to\n   * `babel-preset-env` when transpiling the service worker bundle.\n   *\n   * @param {string} [config.cacheId] An optional ID to be prepended to cache\n   * names. This is primarily useful for local development where multiple sites\n   * may be served from the same `http://localhost:port` origin.\n   *\n   * @param {boolean} [config.cleanupOutdatedCaches=false] Whether or not Workbox\n   * should attempt to identify an delete any precaches created by older,\n   * incompatible versions.\n   *\n   * @param {boolean} [config.clientsClaim=false] Whether or not the service\n   * worker should [start controlling](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim)\n   * any existing clients as soon as it activates.\n   *\n   * @param {Array<string>} [config.chunks] One or more chunk names whose corresponding\n   * output files should be included in the precache manifest.\n   *\n   * @param {string} [config.directoryIndex='index.html'] If a navigation request\n   * for a URL ending in `/` fails to match a precached URL, this value will be\n   * appended to the URL and that will be checked for a precache match. This\n   * should be set to what your web server is using for its directory index.\n   *\n   * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be\n   * assumed to be uniquely versioned via their URL, and exempted from the normal\n   * HTTP cache-busting that's done when populating the precache. While not\n   * required, it's recommended that if your existing build process already\n   * inserts a `[hash]` value into each filename, you provide a RegExp that will\n   * detect that, as it will reduce the bandwidth consumed when precaching.\n   *\n   * @param {Array<string|RegExp|Function>} [config.exclude=[/\\.map$/, /^manifest.*\\.js$]]\n   * One or more specifiers used to exclude assets from the precache manifest.\n   * This is interpreted following\n   * [the same rules](https://webpack.js.org/configuration/module/#condition)\n   * as `webpack`'s standard `exclude` option.\n   *\n   * @param {Array<string>} [config.excludeChunks] One or more chunk names whose\n   * corresponding output files should be excluded from the precache manifest.\n   *\n   * @param {Array<RegExp>} [config.ignoreURLParametersMatching=[/^utm_/]]\n   * Any search parameter names that match against one of the RegExp in this array\n   * will be removed before looking for a precache match. This is useful if your\n   * users might request URLs that contain, for example, URL parameters used to\n   * track the source of the traffic.\n   *\n   * @param {Array<string>} [config.importScripts] A list of JavaScript files that\n   * should be passed to [`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\n   * inside the generated service worker file. This is  useful when you want to\n   * let Workbox create your top-level service worker file, but want to include\n   * some additional code, such as a push event listener.\n   *\n   * @param {Array<string>} [config.importScriptsViaChunks] One or more names of\n   * webpack chunks. The content of those chunks will be included in the\n   * generated service worker, via a call to `importScripts()`.\n   *\n   * @param {Array<string|RegExp|Function>} [config.include]\n   * One or more specifiers used to include assets in the precache manifest.\n   * This is interpreted following\n   * [the same rules](https://webpack.js.org/configuration/module/#condition)\n   * as `webpack`'s standard `include` option.\n   *\n   * @param {boolean} [config.inlineWorkboxRuntime=false] Whether the runtime code\n   * for the Workbox library should be included in the top-level service worker,\n   * or split into a separate file that needs to be deployed alongside the service\n   * worker. Keeping the runtime separate means that users will not have to\n   * re-download the Workbox code each time your top-level service worker changes.\n   *\n   * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms]\n   * One or more functions which will be applied sequentially against the\n   * generated manifest. If `modifyURLPrefix` or `dontCacheBustURLsMatching` are\n   * also specified, their corresponding transformations will be applied first.\n   *\n   * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be\n   * used to determine the maximum size of files that will be precached. This\n   * prevents you from inadvertently precaching very large files that might have\n   * accidentally matched one of your patterns.\n   *\n   * @param {string} [config.mode] If set to 'production', then an optimized service\n   * worker bundle that excludes debugging info will be produced. If not explicitly\n   * configured here, the `mode` value configured in the current `webpack` compiltion\n   * will be used.\n   *\n   * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes\n   * that, if present in an entry in the precache manifest, will be replaced with\n   * the corresponding value. This can be used to, for example, remove or add a\n   * path prefix from a manifest entry if your web hosting setup doesn't match\n   * your local filesystem setup. As an alternative with more flexibility, you can\n   * use the `manifestTransforms` option and provide a function that modifies the\n   * entries in the manifest using whatever logic you provide.\n   *\n   * @param {string} [config.navigateFallback] If specified, all\n   * [navigation requests](https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests)\n   * for URLs that aren't precached will be fulfilled with the HTML at the URL\n   * provided. You must pass in the URL of an HTML document that is listed in your\n   * precache manifest. This is meant to be used in a Single Page App scenario, in\n   * which you want all navigations to use common [App Shell HTML](https://developers.google.com/web/fundamentals/architecture/app-shell).\n   *\n   * @param {Array<RegExp>} [config.navigateFallbackDenylist] An optional array\n   * of regular expressions that restricts which URLs the configured\n   * `navigateFallback` behavior applies to. This is useful if only a subset of\n   * your site's URLs should be treated as being part of a\n   * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n   * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n   * configured, the denylist takes precedent.\n   *\n   * @param {Array<RegExp>} [config.navigateFallbackAllowlist] An optional array\n   * of regular expressions that restricts which URLs the configured\n   * `navigateFallback` behavior applies to. This is useful if only a subset of\n   * your site's URLs should be treated as being part of a\n   * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n   * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n   * configured, the denylist takes precedent.\n   *\n   * @param {boolean} [config.navigationPreload=false] Whether or not to enable\n   * [navigation preload](https://developers.google.com/web/tools/workbox/modules/workbox-navigation-preload)\n   * in the generated service worker. When set to true, you must also use\n   * `runtimeCaching` to set up an appropriate response strategy that will match\n   * navigation requests, and make use of the preloaded response.\n   *\n   * @param {boolean|Object} [config.offlineGoogleAnalytics=false] Controls\n   * whether or not to include support for\n   * [offline Google Analytics](https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics).\n   * When `true`, the call to `workbox-google-analytics`'s `initialize()` will be\n   * added to your generated service worker. When set to an `Object`, that object\n   * will be passed in to the `initialize()` call, allowing you to customize the\n   * behavior.\n   *\n   * @param {Array<module:workbox-build.RuntimeCachingEntry>} [config.runtimeCaching]\n   *\n   * @param {boolean} [config.skipWaiting=false] Whether to add an\n   * unconditional call to [`skipWaiting()`]{@link module:workbox-core.skipWaiting}\n   * to the generated service worker. If `false`, then a `message` listener will\n   * be added instead, allowing you to conditionally call `skipWaiting()`.\n   *\n   * @param {boolean} [config.sourcemap=true] Whether to create a sourcemap\n   * for the generated service worker files.\n   *\n   * @param {string} [config.swDest='service-worker.js'] The asset name of the\n   * service worker file that will be created by this plugin.\n   */\n  constructor(config = {}) {\n    this.config = config;\n    this.alreadyCalled = false;\n  }\n  /**\n   * @param {Object} [compiler] default compiler object passed from webpack\n   *\n   * @private\n   */\n\n\n  propagateWebpackConfig(compiler) {\n    // Because this.config is listed last, properties that are already set\n    // there take precedence over derived properties from the compiler.\n    this.config = Object.assign({\n      mode: compiler.options.mode,\n      sourcemap: Boolean(compiler.options.devtool)\n    }, this.config);\n  }\n  /**\n   * @param {Object} [compiler] default compiler object passed from webpack\n   *\n   * @private\n   */\n\n\n  apply(compiler) {\n    this.propagateWebpackConfig(compiler);\n    compiler.hooks.emit.tapPromise(this.constructor.name, compilation => this.handleEmit(compilation).catch(error => compilation.errors.push(error)));\n  }\n  /**\n   * @param {Object} compilation The webpack compilation.\n   *\n   * @private\n   */\n\n\n  async handleEmit(compilation) {\n    // See https://github.com/GoogleChrome/workbox/issues/1790\n    if (this.alreadyCalled) {\n      compilation.warnings.push(`${this.constructor.name} has been called ` + `multiple times, perhaps due to running webpack in --watch mode. The ` + `precache manifest generated after the first call may be inaccurate! ` + `Please see https://github.com/GoogleChrome/workbox/issues/1790 for ` + `more information.`);\n    } else {\n      this.alreadyCalled = true;\n    }\n\n    let config;\n\n    try {\n      // emit might be called multiple times; instead of modifying this.config,\n      // use a validated copy.\n      // See https://github.com/GoogleChrome/workbox/issues/2158\n      config = validate(this.config, webpackGenerateSWSchema);\n    } catch (error) {\n      throw new Error(`Please check your ${this.constructor.name} plugin ` + `configuration:\\n${error.message}`);\n    } // Ensure that we don't precache any of the assets generated by *any*\n    // instance of this plugin.\n\n\n    config.exclude.push(({\n      asset\n    }) => _generatedAssetNames.has(asset.name));\n\n    if (config.importScriptsViaChunks) {\n      // Anything loaded via importScripts() is implicitly cached by the service\n      // worker, and should not be added to the precache manifest.\n      config.excludeChunks = (config.excludeChunks || []).concat(config.importScriptsViaChunks);\n      const scripts = getScriptFilesForChunks(compilation, config.importScriptsViaChunks);\n      config.importScripts = (config.importScripts || []).concat(scripts);\n    }\n\n    config.manifestEntries = await getManifestEntriesFromCompilation(compilation, config);\n    const unbundledCode = populateSWTemplate(config);\n    const files = await bundle({\n      babelPresetEnvTargets: config.babelPresetEnvTargets,\n      inlineWorkboxRuntime: config.inlineWorkboxRuntime,\n      mode: config.mode,\n      sourcemap: config.sourcemap,\n      swDest: relativeToOutputPath(compilation, config.swDest),\n      unbundledCode\n    });\n\n    for (const file of files) {\n      compilation.assets[file.name] = new RawSource(file.contents);\n\n      _generatedAssetNames.add(file.name);\n    }\n  }\n\n}\n\nmodule.exports = GenerateSW;","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-webpack-plugin/build/generate-sw.js"],"names":["RawSource","require","bundle","populateSWTemplate","validate","webpackGenerateSWSchema","getScriptFilesForChunks","getManifestEntriesFromCompilation","relativeToOutputPath","_generatedAssetNames","Set","GenerateSW","constructor","config","alreadyCalled","propagateWebpackConfig","compiler","Object","assign","mode","options","sourcemap","Boolean","devtool","apply","hooks","emit","tapPromise","name","compilation","handleEmit","catch","error","errors","push","warnings","Error","message","exclude","asset","has","importScriptsViaChunks","excludeChunks","concat","scripts","importScripts","manifestEntries","unbundledCode","files","babelPresetEnvTargets","inlineWorkboxRuntime","swDest","file","assets","contents","add","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAM;AACJA,EAAAA;AADI,IAEFC,OAAO,CAAC,iBAAD,CAFX;;AAIA,MAAMC,MAAM,GAAGD,OAAO,CAAC,gCAAD,CAAtB;;AAEA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,8CAAD,CAAlC;;AAEA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,0CAAD,CAAxB;;AAEA,MAAMI,uBAAuB,GAAGJ,OAAO,CAAC,wDAAD,CAAvC;;AAEA,MAAMK,uBAAuB,GAAGL,OAAO,CAAC,mCAAD,CAAvC;;AAEA,MAAMM,iCAAiC,GAAGN,OAAO,CAAC,6CAAD,CAAjD;;AAEA,MAAMO,oBAAoB,GAAGP,OAAO,CAAC,+BAAD,CAApC,C,CAAuE;AACvE;;;AAGA,MAAMQ,oBAAoB,GAAG,IAAIC,GAAJ,EAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMC,UAAN,CAAiB;AACfc;AACvB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,aAAL,GAAqB,KAArB;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEC,EAAAA,sBAAsB,CAACC,QAAD,EAAW;AAC/B;AACA;AACA,SAAKH,MAAL,GAAcI,MAAM,CAACC,MAAP,CAAc;AAC1BC,MAAAA,IAAI,EAAEH,QAAQ,CAACI,OAAT,CAAiBD,IADG;AAE1BE,MAAAA,SAAS,EAAEC,OAAO,CAACN,QAAQ,CAACI,OAAT,CAAiBG,OAAlB;AAFQ,KAAd,EAGX,KAAKV,MAHM,CAAd;AAID;AACD;AACF;AACA;AACA;AACA;;;AAGEW,EAAAA,KAAK,CAACR,QAAD,EAAW;AACd,SAAKD,sBAAL,CAA4BC,QAA5B;AACAA,IAAAA,QAAQ,CAACS,KAAT,CAAeC,IAAf,CAAoBC,UAApB,CAA+B,KAAKf,WAAL,CAAiBgB,IAAhD,EAAsDC,WAAW,IAAI,KAAKC,UAAL,CAAgBD,WAAhB,EAA6BE,KAA7B,CAAmCC,KAAK,IAAIH,WAAW,CAACI,MAAZ,CAAmBC,IAAnB,CAAwBF,KAAxB,CAA5C,CAArE;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGkB,QAAVF,UAAU,CAACD,WAAD,EAAc;AAC5B;AACA,QAAI,KAAKf,aAAT,EAAwB;AACtBe,MAAAA,WAAW,CAACM,QAAZ,CAAqBD,IAArB,CAA2B,GAAE,KAAKtB,WAAL,CAAiBgB,IAAK,mBAAzB,GAA+C,sEAA/C,GAAwH,sEAAxH,GAAiM,qEAAjM,GAAyQ,mBAAnS;AACD,KAFD,MAEO;AACL,WAAKd,aAAL,GAAqB,IAArB;AACD;;AAED,QAAID,MAAJ;;AAEA,QAAI;AACF;AACA;AACA;AACAA,MAAAA,MAAM,GAAGT,QAAQ,CAAC,KAAKS,MAAN,EAAcR,uBAAd,CAAjB;AACD,KALD,CAKE,OAAO2B,KAAP,EAAc;AACd,YAAM,IAAII,KAAJ,CAAW,qBAAoB,KAAKxB,WAAL,CAAiBgB,IAAK,UAA3C,GAAwD,mBAAkBI,KAAK,CAACK,OAAQ,EAAlG,CAAN;AACD,KAjB2B,CAiB1B;AACF;;;AAGAxB,IAAAA,MAAM,CAACyB,OAAP,CAAeJ,IAAf,CAAoB,CAAC;AACnBK,MAAAA;AADmB,KAAD,KAEd9B,oBAAoB,CAAC+B,GAArB,CAAyBD,KAAK,CAACX,IAA/B,CAFN;;AAIA,QAAIf,MAAM,CAAC4B,sBAAX,EAAmC;AACjC;AACA;AACA5B,MAAAA,MAAM,CAAC6B,aAAP,GAAuB,CAAC7B,MAAM,CAAC6B,aAAP,IAAwB,EAAzB,EAA6BC,MAA7B,CAAoC9B,MAAM,CAAC4B,sBAA3C,CAAvB;AACA,YAAMG,OAAO,GAAGtC,uBAAuB,CAACuB,WAAD,EAAchB,MAAM,CAAC4B,sBAArB,CAAvC;AACA5B,MAAAA,MAAM,CAACgC,aAAP,GAAuB,CAAChC,MAAM,CAACgC,aAAP,IAAwB,EAAzB,EAA6BF,MAA7B,CAAoCC,OAApC,CAAvB;AACD;;AAED/B,IAAAA,MAAM,CAACiC,eAAP,GAAyB,MAAMvC,iCAAiC,CAACsB,WAAD,EAAchB,MAAd,CAAhE;AACA,UAAMkC,aAAa,GAAG5C,kBAAkB,CAACU,MAAD,CAAxC;AACA,UAAMmC,KAAK,GAAG,MAAM9C,MAAM,CAAC;AACzB+C,MAAAA,qBAAqB,EAAEpC,MAAM,CAACoC,qBADL;AAEzBC,MAAAA,oBAAoB,EAAErC,MAAM,CAACqC,oBAFJ;AAGzB/B,MAAAA,IAAI,EAAEN,MAAM,CAACM,IAHY;AAIzBE,MAAAA,SAAS,EAAER,MAAM,CAACQ,SAJO;AAKzB8B,MAAAA,MAAM,EAAE3C,oBAAoB,CAACqB,WAAD,EAAchB,MAAM,CAACsC,MAArB,CALH;AAMzBJ,MAAAA;AANyB,KAAD,CAA1B;;AASA,SAAK,MAAMK,IAAX,IAAmBJ,KAAnB,EAA0B;AACxBnB,MAAAA,WAAW,CAACwB,MAAZ,CAAmBD,IAAI,CAACxB,IAAxB,IAAgC,IAAI5B,SAAJ,CAAcoD,IAAI,CAACE,QAAnB,CAAhC;;AAEA7C,MAAAA,oBAAoB,CAAC8C,GAArB,CAAyBH,IAAI,CAACxB,IAA9B;AACD;AACF;;AA/Oc;;AAmPjB4B,MAAM,CAACC,OAAP,GAAiB9C,UAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst {\n  RawSource\n} = require('webpack-sources');\n\nconst bundle = require('workbox-build/build/lib/bundle');\n\nconst populateSWTemplate = require('workbox-build/build/lib/populate-sw-template');\n\nconst validate = require('workbox-build/build/lib/validate-options');\n\nconst webpackGenerateSWSchema = require('workbox-build/build/options/schema/webpack-generate-sw');\n\nconst getScriptFilesForChunks = require('./lib/get-script-files-for-chunks');\n\nconst getManifestEntriesFromCompilation = require('./lib/get-manifest-entries-from-compilation');\n\nconst relativeToOutputPath = require('./lib/relative-to-output-path'); // Used to keep track of swDest files written by *any* instance of this plugin.\n// See https://github.com/GoogleChrome/workbox/issues/2181\n\n\nconst _generatedAssetNames = new Set();\n/**\n * This class supports creating a new, ready-to-use service worker file as\n * part of the webpack compilation process.\n *\n * Use an instance of `GenerateSW` in the\n * [`plugins` array](https://webpack.js.org/concepts/plugins/#usage) of a\n * webpack config.\n *\n * @memberof module:workbox-webpack-plugin\n */\n\n\nclass GenerateSW {\n  // eslint-disable-next-line jsdoc/newline-after-description\n\n  /**\n   * Creates an instance of GenerateSW.\n   *\n   * @param {Object} config The configuration to use.\n   *\n   * @param {Array<module:workbox-build.ManifestEntry>} [config.additionalManifestEntries]\n   * A list of entries to be precached, in addition to any entries that are\n   * generated as part of the build configuration.\n   *\n   * @param {Array<string>} [config.babelPresetEnvTargets=['chrome >= 56']]\n   * The [targets](https://babeljs.io/docs/en/babel-preset-env#targets) to pass to\n   * `babel-preset-env` when transpiling the service worker bundle.\n   *\n   * @param {string} [config.cacheId] An optional ID to be prepended to cache\n   * names. This is primarily useful for local development where multiple sites\n   * may be served from the same `http://localhost:port` origin.\n   *\n   * @param {boolean} [config.cleanupOutdatedCaches=false] Whether or not Workbox\n   * should attempt to identify an delete any precaches created by older,\n   * incompatible versions.\n   *\n   * @param {boolean} [config.clientsClaim=false] Whether or not the service\n   * worker should [start controlling](https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#clientsclaim)\n   * any existing clients as soon as it activates.\n   *\n   * @param {Array<string>} [config.chunks] One or more chunk names whose corresponding\n   * output files should be included in the precache manifest.\n   *\n   * @param {string} [config.directoryIndex='index.html'] If a navigation request\n   * for a URL ending in `/` fails to match a precached URL, this value will be\n   * appended to the URL and that will be checked for a precache match. This\n   * should be set to what your web server is using for its directory index.\n   *\n   * @param {RegExp} [config.dontCacheBustURLsMatching] Assets that match this will be\n   * assumed to be uniquely versioned via their URL, and exempted from the normal\n   * HTTP cache-busting that's done when populating the precache. While not\n   * required, it's recommended that if your existing build process already\n   * inserts a `[hash]` value into each filename, you provide a RegExp that will\n   * detect that, as it will reduce the bandwidth consumed when precaching.\n   *\n   * @param {Array<string|RegExp|Function>} [config.exclude=[/\\.map$/, /^manifest.*\\.js$]]\n   * One or more specifiers used to exclude assets from the precache manifest.\n   * This is interpreted following\n   * [the same rules](https://webpack.js.org/configuration/module/#condition)\n   * as `webpack`'s standard `exclude` option.\n   *\n   * @param {Array<string>} [config.excludeChunks] One or more chunk names whose\n   * corresponding output files should be excluded from the precache manifest.\n   *\n   * @param {Array<RegExp>} [config.ignoreURLParametersMatching=[/^utm_/]]\n   * Any search parameter names that match against one of the RegExp in this array\n   * will be removed before looking for a precache match. This is useful if your\n   * users might request URLs that contain, for example, URL parameters used to\n   * track the source of the traffic.\n   *\n   * @param {Array<string>} [config.importScripts] A list of JavaScript files that\n   * should be passed to [`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\n   * inside the generated service worker file. This is  useful when you want to\n   * let Workbox create your top-level service worker file, but want to include\n   * some additional code, such as a push event listener.\n   *\n   * @param {Array<string>} [config.importScriptsViaChunks] One or more names of\n   * webpack chunks. The content of those chunks will be included in the\n   * generated service worker, via a call to `importScripts()`.\n   *\n   * @param {Array<string|RegExp|Function>} [config.include]\n   * One or more specifiers used to include assets in the precache manifest.\n   * This is interpreted following\n   * [the same rules](https://webpack.js.org/configuration/module/#condition)\n   * as `webpack`'s standard `include` option.\n   *\n   * @param {boolean} [config.inlineWorkboxRuntime=false] Whether the runtime code\n   * for the Workbox library should be included in the top-level service worker,\n   * or split into a separate file that needs to be deployed alongside the service\n   * worker. Keeping the runtime separate means that users will not have to\n   * re-download the Workbox code each time your top-level service worker changes.\n   *\n   * @param {Array<module:workbox-build.ManifestTransform>} [config.manifestTransforms]\n   * One or more functions which will be applied sequentially against the\n   * generated manifest. If `modifyURLPrefix` or `dontCacheBustURLsMatching` are\n   * also specified, their corresponding transformations will be applied first.\n   *\n   * @param {number} [config.maximumFileSizeToCacheInBytes=2097152] This value can be\n   * used to determine the maximum size of files that will be precached. This\n   * prevents you from inadvertently precaching very large files that might have\n   * accidentally matched one of your patterns.\n   *\n   * @param {string} [config.mode] If set to 'production', then an optimized service\n   * worker bundle that excludes debugging info will be produced. If not explicitly\n   * configured here, the `mode` value configured in the current `webpack` compiltion\n   * will be used.\n   *\n   * @param {object<string, string>} [config.modifyURLPrefix] A mapping of prefixes\n   * that, if present in an entry in the precache manifest, will be replaced with\n   * the corresponding value. This can be used to, for example, remove or add a\n   * path prefix from a manifest entry if your web hosting setup doesn't match\n   * your local filesystem setup. As an alternative with more flexibility, you can\n   * use the `manifestTransforms` option and provide a function that modifies the\n   * entries in the manifest using whatever logic you provide.\n   *\n   * @param {string} [config.navigateFallback] If specified, all\n   * [navigation requests](https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests)\n   * for URLs that aren't precached will be fulfilled with the HTML at the URL\n   * provided. You must pass in the URL of an HTML document that is listed in your\n   * precache manifest. This is meant to be used in a Single Page App scenario, in\n   * which you want all navigations to use common [App Shell HTML](https://developers.google.com/web/fundamentals/architecture/app-shell).\n   *\n   * @param {Array<RegExp>} [config.navigateFallbackDenylist] An optional array\n   * of regular expressions that restricts which URLs the configured\n   * `navigateFallback` behavior applies to. This is useful if only a subset of\n   * your site's URLs should be treated as being part of a\n   * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n   * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n   * configured, the denylist takes precedent.\n   *\n   * @param {Array<RegExp>} [config.navigateFallbackAllowlist] An optional array\n   * of regular expressions that restricts which URLs the configured\n   * `navigateFallback` behavior applies to. This is useful if only a subset of\n   * your site's URLs should be treated as being part of a\n   * [Single Page App](https://en.wikipedia.org/wiki/Single-page_application). If\n   * both `navigateFallbackDenylist` and `navigateFallbackAllowlist` are\n   * configured, the denylist takes precedent.\n   *\n   * @param {boolean} [config.navigationPreload=false] Whether or not to enable\n   * [navigation preload](https://developers.google.com/web/tools/workbox/modules/workbox-navigation-preload)\n   * in the generated service worker. When set to true, you must also use\n   * `runtimeCaching` to set up an appropriate response strategy that will match\n   * navigation requests, and make use of the preloaded response.\n   *\n   * @param {boolean|Object} [config.offlineGoogleAnalytics=false] Controls\n   * whether or not to include support for\n   * [offline Google Analytics](https://developers.google.com/web/tools/workbox/guides/enable-offline-analytics).\n   * When `true`, the call to `workbox-google-analytics`'s `initialize()` will be\n   * added to your generated service worker. When set to an `Object`, that object\n   * will be passed in to the `initialize()` call, allowing you to customize the\n   * behavior.\n   *\n   * @param {Array<module:workbox-build.RuntimeCachingEntry>} [config.runtimeCaching]\n   *\n   * @param {boolean} [config.skipWaiting=false] Whether to add an\n   * unconditional call to [`skipWaiting()`]{@link module:workbox-core.skipWaiting}\n   * to the generated service worker. If `false`, then a `message` listener will\n   * be added instead, allowing you to conditionally call `skipWaiting()`.\n   *\n   * @param {boolean} [config.sourcemap=true] Whether to create a sourcemap\n   * for the generated service worker files.\n   *\n   * @param {string} [config.swDest='service-worker.js'] The asset name of the\n   * service worker file that will be created by this plugin.\n   */\n  constructor(config = {}) {\n    this.config = config;\n    this.alreadyCalled = false;\n  }\n  /**\n   * @param {Object} [compiler] default compiler object passed from webpack\n   *\n   * @private\n   */\n\n\n  propagateWebpackConfig(compiler) {\n    // Because this.config is listed last, properties that are already set\n    // there take precedence over derived properties from the compiler.\n    this.config = Object.assign({\n      mode: compiler.options.mode,\n      sourcemap: Boolean(compiler.options.devtool)\n    }, this.config);\n  }\n  /**\n   * @param {Object} [compiler] default compiler object passed from webpack\n   *\n   * @private\n   */\n\n\n  apply(compiler) {\n    this.propagateWebpackConfig(compiler);\n    compiler.hooks.emit.tapPromise(this.constructor.name, compilation => this.handleEmit(compilation).catch(error => compilation.errors.push(error)));\n  }\n  /**\n   * @param {Object} compilation The webpack compilation.\n   *\n   * @private\n   */\n\n\n  async handleEmit(compilation) {\n    // See https://github.com/GoogleChrome/workbox/issues/1790\n    if (this.alreadyCalled) {\n      compilation.warnings.push(`${this.constructor.name} has been called ` + `multiple times, perhaps due to running webpack in --watch mode. The ` + `precache manifest generated after the first call may be inaccurate! ` + `Please see https://github.com/GoogleChrome/workbox/issues/1790 for ` + `more information.`);\n    } else {\n      this.alreadyCalled = true;\n    }\n\n    let config;\n\n    try {\n      // emit might be called multiple times; instead of modifying this.config,\n      // use a validated copy.\n      // See https://github.com/GoogleChrome/workbox/issues/2158\n      config = validate(this.config, webpackGenerateSWSchema);\n    } catch (error) {\n      throw new Error(`Please check your ${this.constructor.name} plugin ` + `configuration:\\n${error.message}`);\n    } // Ensure that we don't precache any of the assets generated by *any*\n    // instance of this plugin.\n\n\n    config.exclude.push(({\n      asset\n    }) => _generatedAssetNames.has(asset.name));\n\n    if (config.importScriptsViaChunks) {\n      // Anything loaded via importScripts() is implicitly cached by the service\n      // worker, and should not be added to the precache manifest.\n      config.excludeChunks = (config.excludeChunks || []).concat(config.importScriptsViaChunks);\n      const scripts = getScriptFilesForChunks(compilation, config.importScriptsViaChunks);\n      config.importScripts = (config.importScripts || []).concat(scripts);\n    }\n\n    config.manifestEntries = await getManifestEntriesFromCompilation(compilation, config);\n    const unbundledCode = populateSWTemplate(config);\n    const files = await bundle({\n      babelPresetEnvTargets: config.babelPresetEnvTargets,\n      inlineWorkboxRuntime: config.inlineWorkboxRuntime,\n      mode: config.mode,\n      sourcemap: config.sourcemap,\n      swDest: relativeToOutputPath(compilation, config.swDest),\n      unbundledCode\n    });\n\n    for (const file of files) {\n      compilation.assets[file.name] = new RawSource(file.contents);\n\n      _generatedAssetNames.add(file.name);\n    }\n  }\n\n}\n\nmodule.exports = GenerateSW;"]},"metadata":{},"sourceType":"script"}