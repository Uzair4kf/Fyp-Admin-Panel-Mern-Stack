{"ast":null,"code":"'use strict';\n\nconst {\n  parseContentType\n} = require('./utils.js');\n\nfunction getInstance(cfg) {\n  const headers = cfg.headers;\n  const conType = parseContentType(headers['content-type']);\n  if (!conType) throw new Error('Malformed content type');\n\n  for (const type of TYPES) {\n    const matched = type.detect(conType);\n    if (!matched) continue;\n    const instanceCfg = {\n      limits: cfg.limits,\n      headers,\n      conType,\n      highWaterMark: undefined,\n      fileHwm: undefined,\n      defCharset: undefined,\n      defParamCharset: undefined,\n      preservePath: false\n    };\n    if (cfg.highWaterMark) instanceCfg.highWaterMark = cfg.highWaterMark;\n    if (cfg.fileHwm) instanceCfg.fileHwm = cfg.fileHwm;\n    instanceCfg.defCharset = cfg.defCharset;\n    instanceCfg.defParamCharset = cfg.defParamCharset;\n    instanceCfg.preservePath = cfg.preservePath;\n    return new type(instanceCfg);\n  }\n\n  throw new Error(`Unsupported content type: ${headers['content-type']}`);\n} // Note: types are explicitly listed here for easier bundling\n// See: https://github.com/mscdex/busboy/issues/121\n\n\nconst TYPES = [require('./types/multipart'), require('./types/urlencoded')].filter(function (typemod) {\n  return typeof typemod.detect === 'function';\n});\n\nmodule.exports = cfg => {\n  if (typeof cfg !== 'object' || cfg === null) cfg = {};\n\n  if (typeof cfg.headers !== 'object' || cfg.headers === null || typeof cfg.headers['content-type'] !== 'string') {\n    throw new Error('Missing Content-Type');\n  }\n\n  return getInstance(cfg);\n};","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/node_modules/busboy/lib/index.js"],"names":["parseContentType","require","getInstance","cfg","headers","conType","Error","type","TYPES","matched","detect","instanceCfg","limits","highWaterMark","undefined","fileHwm","defCharset","defParamCharset","preservePath","filter","typemod","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,YAAD,CAApC;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,QAAMC,OAAO,GAAGD,GAAG,CAACC,OAApB;AACA,QAAMC,OAAO,GAAGL,gBAAgB,CAACI,OAAO,CAAC,cAAD,CAAR,CAAhC;AACA,MAAI,CAACC,OAAL,EACE,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;;AAEF,OAAK,MAAMC,IAAX,IAAmBC,KAAnB,EAA0B;AACxB,UAAMC,OAAO,GAAGF,IAAI,CAACG,MAAL,CAAYL,OAAZ,CAAhB;AACA,QAAI,CAACI,OAAL,EACE;AAEF,UAAME,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAET,GAAG,CAACS,MADM;AAElBR,MAAAA,OAFkB;AAGlBC,MAAAA,OAHkB;AAIlBQ,MAAAA,aAAa,EAAEC,SAJG;AAKlBC,MAAAA,OAAO,EAAED,SALS;AAMlBE,MAAAA,UAAU,EAAEF,SANM;AAOlBG,MAAAA,eAAe,EAAEH,SAPC;AAQlBI,MAAAA,YAAY,EAAE;AARI,KAApB;AAUA,QAAIf,GAAG,CAACU,aAAR,EACEF,WAAW,CAACE,aAAZ,GAA4BV,GAAG,CAACU,aAAhC;AACF,QAAIV,GAAG,CAACY,OAAR,EACEJ,WAAW,CAACI,OAAZ,GAAsBZ,GAAG,CAACY,OAA1B;AACFJ,IAAAA,WAAW,CAACK,UAAZ,GAAyBb,GAAG,CAACa,UAA7B;AACAL,IAAAA,WAAW,CAACM,eAAZ,GAA8Bd,GAAG,CAACc,eAAlC;AACAN,IAAAA,WAAW,CAACO,YAAZ,GAA2Bf,GAAG,CAACe,YAA/B;AACA,WAAO,IAAIX,IAAJ,CAASI,WAAT,CAAP;AACD;;AAED,QAAM,IAAIL,KAAJ,CAAW,6BAA4BF,OAAO,CAAC,cAAD,CAAiB,EAA/D,CAAN;AACD,C,CAED;AACA;;;AACA,MAAMI,KAAK,GAAG,CACZP,OAAO,CAAC,mBAAD,CADK,EAEZA,OAAO,CAAC,oBAAD,CAFK,EAGZkB,MAHY,CAGL,UAASC,OAAT,EAAkB;AAAE,SAAO,OAAOA,OAAO,CAACV,MAAf,KAA0B,UAAjC;AAA8C,CAH7D,CAAd;;AAKAW,MAAM,CAACC,OAAP,GAAkBnB,GAAD,IAAS;AACxB,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,KAAK,IAAvC,EACEA,GAAG,GAAG,EAAN;;AAEF,MAAI,OAAOA,GAAG,CAACC,OAAX,KAAuB,QAAvB,IACGD,GAAG,CAACC,OAAJ,KAAgB,IADnB,IAEG,OAAOD,GAAG,CAACC,OAAJ,CAAY,cAAZ,CAAP,KAAuC,QAF9C,EAEwD;AACtD,UAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,SAAOJ,WAAW,CAACC,GAAD,CAAlB;AACD,CAXD","sourcesContent":["'use strict';\n\nconst { parseContentType } = require('./utils.js');\n\nfunction getInstance(cfg) {\n  const headers = cfg.headers;\n  const conType = parseContentType(headers['content-type']);\n  if (!conType)\n    throw new Error('Malformed content type');\n\n  for (const type of TYPES) {\n    const matched = type.detect(conType);\n    if (!matched)\n      continue;\n\n    const instanceCfg = {\n      limits: cfg.limits,\n      headers,\n      conType,\n      highWaterMark: undefined,\n      fileHwm: undefined,\n      defCharset: undefined,\n      defParamCharset: undefined,\n      preservePath: false,\n    };\n    if (cfg.highWaterMark)\n      instanceCfg.highWaterMark = cfg.highWaterMark;\n    if (cfg.fileHwm)\n      instanceCfg.fileHwm = cfg.fileHwm;\n    instanceCfg.defCharset = cfg.defCharset;\n    instanceCfg.defParamCharset = cfg.defParamCharset;\n    instanceCfg.preservePath = cfg.preservePath;\n    return new type(instanceCfg);\n  }\n\n  throw new Error(`Unsupported content type: ${headers['content-type']}`);\n}\n\n// Note: types are explicitly listed here for easier bundling\n// See: https://github.com/mscdex/busboy/issues/121\nconst TYPES = [\n  require('./types/multipart'),\n  require('./types/urlencoded'),\n].filter(function(typemod) { return typeof typemod.detect === 'function'; });\n\nmodule.exports = (cfg) => {\n  if (typeof cfg !== 'object' || cfg === null)\n    cfg = {};\n\n  if (typeof cfg.headers !== 'object'\n      || cfg.headers === null\n      || typeof cfg.headers['content-type'] !== 'string') {\n    throw new Error('Missing Content-Type');\n  }\n\n  return getInstance(cfg);\n};\n"]},"metadata":{},"sourceType":"script"}