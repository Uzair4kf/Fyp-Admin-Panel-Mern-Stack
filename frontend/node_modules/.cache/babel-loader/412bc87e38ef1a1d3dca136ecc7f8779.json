{"ast":null,"code":"this.workbox = this.workbox || {};\n\nthis.workbox.rangeRequests = function (exports, WorkboxError_js, assert_js, logger_js) {\n  'use strict';\n\n  try {\n    self['workbox:range-requests:5.1.4'] && _();\n  } catch (e) {}\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * @param {Blob} blob A source blob.\n   * @param {number} [start] The offset to use as the start of the\n   * slice.\n   * @param {number} [end] The offset to use as the end of the slice.\n   * @return {Object} An object with `start` and `end` properties, reflecting\n   * the effective boundaries to use given the size of the blob.\n   *\n   * @private\n   */\n\n\n  function calculateEffectiveBoundaries(blob, start, end) {\n    {\n      assert_js.assert.isInstance(blob, Blob, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'calculateEffectiveBoundaries',\n        paramName: 'blob'\n      });\n    }\n    const blobSize = blob.size;\n\n    if (end && end > blobSize || start && start < 0) {\n      throw new WorkboxError_js.WorkboxError('range-not-satisfiable', {\n        size: blobSize,\n        end,\n        start\n      });\n    }\n\n    let effectiveStart;\n    let effectiveEnd;\n\n    if (start !== undefined && end !== undefined) {\n      effectiveStart = start; // Range values are inclusive, so add 1 to the value.\n\n      effectiveEnd = end + 1;\n    } else if (start !== undefined && end === undefined) {\n      effectiveStart = start;\n      effectiveEnd = blobSize;\n    } else if (end !== undefined && start === undefined) {\n      effectiveStart = blobSize - end;\n      effectiveEnd = blobSize;\n    }\n\n    return {\n      start: effectiveStart,\n      end: effectiveEnd\n    };\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * @param {string} rangeHeader A Range: header value.\n   * @return {Object} An object with `start` and `end` properties, reflecting\n   * the parsed value of the Range: header. If either the `start` or `end` are\n   * omitted, then `null` will be returned.\n   *\n   * @private\n   */\n\n\n  function parseRangeHeader(rangeHeader) {\n    {\n      assert_js.assert.isType(rangeHeader, 'string', {\n        moduleName: 'workbox-range-requests',\n        funcName: 'parseRangeHeader',\n        paramName: 'rangeHeader'\n      });\n    }\n    const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n\n    if (!normalizedRangeHeader.startsWith('bytes=')) {\n      throw new WorkboxError_js.WorkboxError('unit-must-be-bytes', {\n        normalizedRangeHeader\n      });\n    } // Specifying multiple ranges separate by commas is valid syntax, but this\n    // library only attempts to handle a single, contiguous sequence of bytes.\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n\n\n    if (normalizedRangeHeader.includes(',')) {\n      throw new WorkboxError_js.WorkboxError('single-range-only', {\n        normalizedRangeHeader\n      });\n    }\n\n    const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader); // We need either at least one of the start or end values.\n\n    if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n      throw new WorkboxError_js.WorkboxError('invalid-range-values', {\n        normalizedRangeHeader\n      });\n    }\n\n    return {\n      start: rangeParts[1] === '' ? undefined : Number(rangeParts[1]),\n      end: rangeParts[2] === '' ? undefined : Number(rangeParts[2])\n    };\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Given a `Request` and `Response` objects as input, this will return a\n   * promise for a new `Response`.\n   *\n   * If the original `Response` already contains partial content (i.e. it has\n   * a status of 206), then this assumes it already fulfills the `Range:`\n   * requirements, and will return it as-is.\n   *\n   * @param {Request} request A request, which should contain a Range:\n   * header.\n   * @param {Response} originalResponse A response.\n   * @return {Promise<Response>} Either a `206 Partial Content` response, with\n   * the response body set to the slice of content specified by the request's\n   * `Range:` header, or a `416 Range Not Satisfiable` response if the\n   * conditions of the `Range:` header can't be met.\n   *\n   * @memberof module:workbox-range-requests\n   */\n\n\n  async function createPartialResponse(request, originalResponse) {\n    try {\n      if (\"dev\" !== 'production') {\n        assert_js.assert.isInstance(request, Request, {\n          moduleName: 'workbox-range-requests',\n          funcName: 'createPartialResponse',\n          paramName: 'request'\n        });\n        assert_js.assert.isInstance(originalResponse, Response, {\n          moduleName: 'workbox-range-requests',\n          funcName: 'createPartialResponse',\n          paramName: 'originalResponse'\n        });\n      }\n\n      if (originalResponse.status === 206) {\n        // If we already have a 206, then just pass it through as-is;\n        // see https://github.com/GoogleChrome/workbox/issues/1720\n        return originalResponse;\n      }\n\n      const rangeHeader = request.headers.get('range');\n\n      if (!rangeHeader) {\n        throw new WorkboxError_js.WorkboxError('no-range-header');\n      }\n\n      const boundaries = parseRangeHeader(rangeHeader);\n      const originalBlob = await originalResponse.blob();\n      const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n      const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n      const slicedBlobSize = slicedBlob.size;\n      const slicedResponse = new Response(slicedBlob, {\n        // Status code 206 is for a Partial Content response.\n        // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n        status: 206,\n        statusText: 'Partial Content',\n        headers: originalResponse.headers\n      });\n      slicedResponse.headers.set('Content-Length', String(slicedBlobSize));\n      slicedResponse.headers.set('Content-Range', `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` + originalBlob.size);\n      return slicedResponse;\n    } catch (error) {\n      {\n        logger_js.logger.warn(`Unable to construct a partial response; returning a ` + `416 Range Not Satisfiable response instead.`);\n        logger_js.logger.groupCollapsed(`View details here.`);\n        logger_js.logger.log(error);\n        logger_js.logger.log(request);\n        logger_js.logger.log(originalResponse);\n        logger_js.logger.groupEnd();\n      }\n      return new Response('', {\n        status: 416,\n        statusText: 'Range Not Satisfiable'\n      });\n    }\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * The range request plugin makes it easy for a request with a 'Range' header to\n   * be fulfilled by a cached response.\n   *\n   * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n   * and returning the appropriate subset of the cached response body.\n   *\n   * @memberof module:workbox-range-requests\n   */\n\n\n  class RangeRequestsPlugin {\n    constructor() {\n      /**\n       * @param {Object} options\n       * @param {Request} options.request The original request, which may or may not\n       * contain a Range: header.\n       * @param {Response} options.cachedResponse The complete cached response.\n       * @return {Promise<Response>} If request contains a 'Range' header, then a\n       * new response with status 206 whose body is a subset of `cachedResponse` is\n       * returned. Otherwise, `cachedResponse` is returned as-is.\n       *\n       * @private\n       */\n      this.cachedResponseWillBeUsed = async ({\n        request,\n        cachedResponse\n      }) => {\n        // Only return a sliced response if there's something valid in the cache,\n        // and there's a Range: header in the request.\n        if (cachedResponse && request.headers.has('range')) {\n          return await createPartialResponse(request, cachedResponse);\n        } // If there was no Range: header, or if cachedResponse wasn't valid, just\n        // pass it through as-is.\n\n\n        return cachedResponse;\n      };\n    }\n\n  }\n\n  exports.RangeRequestsPlugin = RangeRequestsPlugin;\n  exports.createPartialResponse = createPartialResponse;\n  return exports;\n}({}, workbox.core._private, workbox.core._private, workbox.core._private);","map":{"version":3,"sources":["../_version.js","../utils/calculateEffectiveBoundaries.js","../utils/parseRangeHeader.js","../createPartialResponse.js","../RangeRequestsPlugin.js"],"names":["self","_","assert","moduleName","funcName","paramName","blobSize","blob","end","start","WorkboxError","size","effectiveStart","effectiveEnd","normalizedRangeHeader","rangeHeader","rangeParts","Number","process","originalResponse","request","boundaries","parseRangeHeader","originalBlob","effectiveBoundaries","calculateEffectiveBoundaries","slicedBlob","slicedBlobSize","slicedResponse","status","statusText","headers","String","logger","constructor","cachedResponse","createPartialResponse"],"mappings":"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","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:range-requests:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {Blob} blob A source blob.\n * @param {number} [start] The offset to use as the start of the\n * slice.\n * @param {number} [end] The offset to use as the end of the slice.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the effective boundaries to use given the size of the blob.\n *\n * @private\n */\nfunction calculateEffectiveBoundaries(blob, start, end) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(blob, Blob, {\n            moduleName: 'workbox-range-requests',\n            funcName: 'calculateEffectiveBoundaries',\n            paramName: 'blob',\n        });\n    }\n    const blobSize = blob.size;\n    if ((end && end > blobSize) || (start && start < 0)) {\n        throw new WorkboxError('range-not-satisfiable', {\n            size: blobSize,\n            end,\n            start,\n        });\n    }\n    let effectiveStart;\n    let effectiveEnd;\n    if (start !== undefined && end !== undefined) {\n        effectiveStart = start;\n        // Range values are inclusive, so add 1 to the value.\n        effectiveEnd = end + 1;\n    }\n    else if (start !== undefined && end === undefined) {\n        effectiveStart = start;\n        effectiveEnd = blobSize;\n    }\n    else if (end !== undefined && start === undefined) {\n        effectiveStart = blobSize - end;\n        effectiveEnd = blobSize;\n    }\n    return {\n        start: effectiveStart,\n        end: effectiveEnd,\n    };\n}\nexport { calculateEffectiveBoundaries };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {string} rangeHeader A Range: header value.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the parsed value of the Range: header. If either the `start` or `end` are\n * omitted, then `null` will be returned.\n *\n * @private\n */\nfunction parseRangeHeader(rangeHeader) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(rangeHeader, 'string', {\n            moduleName: 'workbox-range-requests',\n            funcName: 'parseRangeHeader',\n            paramName: 'rangeHeader',\n        });\n    }\n    const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n    if (!normalizedRangeHeader.startsWith('bytes=')) {\n        throw new WorkboxError('unit-must-be-bytes', { normalizedRangeHeader });\n    }\n    // Specifying multiple ranges separate by commas is valid syntax, but this\n    // library only attempts to handle a single, contiguous sequence of bytes.\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n    if (normalizedRangeHeader.includes(',')) {\n        throw new WorkboxError('single-range-only', { normalizedRangeHeader });\n    }\n    const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader);\n    // We need either at least one of the start or end values.\n    if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n        throw new WorkboxError('invalid-range-values', { normalizedRangeHeader });\n    }\n    return {\n        start: rangeParts[1] === '' ? undefined : Number(rangeParts[1]),\n        end: rangeParts[2] === '' ? undefined : Number(rangeParts[2]),\n    };\n}\nexport { parseRangeHeader };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { calculateEffectiveBoundaries } from './utils/calculateEffectiveBoundaries.js';\nimport { parseRangeHeader } from './utils/parseRangeHeader.js';\nimport './_version.js';\n/**\n * Given a `Request` and `Response` objects as input, this will return a\n * promise for a new `Response`.\n *\n * If the original `Response` already contains partial content (i.e. it has\n * a status of 206), then this assumes it already fulfills the `Range:`\n * requirements, and will return it as-is.\n *\n * @param {Request} request A request, which should contain a Range:\n * header.\n * @param {Response} originalResponse A response.\n * @return {Promise<Response>} Either a `206 Partial Content` response, with\n * the response body set to the slice of content specified by the request's\n * `Range:` header, or a `416 Range Not Satisfiable` response if the\n * conditions of the `Range:` header can't be met.\n *\n * @memberof module:workbox-range-requests\n */\nasync function createPartialResponse(request, originalResponse) {\n    try {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-range-requests',\n                funcName: 'createPartialResponse',\n                paramName: 'request',\n            });\n            assert.isInstance(originalResponse, Response, {\n                moduleName: 'workbox-range-requests',\n                funcName: 'createPartialResponse',\n                paramName: 'originalResponse',\n            });\n        }\n        if (originalResponse.status === 206) {\n            // If we already have a 206, then just pass it through as-is;\n            // see https://github.com/GoogleChrome/workbox/issues/1720\n            return originalResponse;\n        }\n        const rangeHeader = request.headers.get('range');\n        if (!rangeHeader) {\n            throw new WorkboxError('no-range-header');\n        }\n        const boundaries = parseRangeHeader(rangeHeader);\n        const originalBlob = await originalResponse.blob();\n        const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n        const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n        const slicedBlobSize = slicedBlob.size;\n        const slicedResponse = new Response(slicedBlob, {\n            // Status code 206 is for a Partial Content response.\n            // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n            status: 206,\n            statusText: 'Partial Content',\n            headers: originalResponse.headers,\n        });\n        slicedResponse.headers.set('Content-Length', String(slicedBlobSize));\n        slicedResponse.headers.set('Content-Range', `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` +\n            originalBlob.size);\n        return slicedResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to construct a partial response; returning a ` +\n                `416 Range Not Satisfiable response instead.`);\n            logger.groupCollapsed(`View details here.`);\n            logger.log(error);\n            logger.log(request);\n            logger.log(originalResponse);\n            logger.groupEnd();\n        }\n        return new Response('', {\n            status: 416,\n            statusText: 'Range Not Satisfiable',\n        });\n    }\n}\nexport { createPartialResponse };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { createPartialResponse } from './createPartialResponse.js';\nimport './_version.js';\n/**\n * The range request plugin makes it easy for a request with a 'Range' header to\n * be fulfilled by a cached response.\n *\n * It does this by intercepting the `cachedResponseWillBeUsed` plugin callback\n * and returning the appropriate subset of the cached response body.\n *\n * @memberof module:workbox-range-requests\n */\nclass RangeRequestsPlugin {\n    constructor() {\n        /**\n         * @param {Object} options\n         * @param {Request} options.request The original request, which may or may not\n         * contain a Range: header.\n         * @param {Response} options.cachedResponse The complete cached response.\n         * @return {Promise<Response>} If request contains a 'Range' header, then a\n         * new response with status 206 whose body is a subset of `cachedResponse` is\n         * returned. Otherwise, `cachedResponse` is returned as-is.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ request, cachedResponse }) => {\n            // Only return a sliced response if there's something valid in the cache,\n            // and there's a Range: header in the request.\n            if (cachedResponse && request.headers.has('range')) {\n                return await createPartialResponse(request, cachedResponse);\n            }\n            // If there was no Range: header, or if cachedResponse wasn't valid, just\n            // pass it through as-is.\n            return cachedResponse;\n        };\n    }\n}\nexport { RangeRequestsPlugin };\n"]},"metadata":{},"sourceType":"script"}