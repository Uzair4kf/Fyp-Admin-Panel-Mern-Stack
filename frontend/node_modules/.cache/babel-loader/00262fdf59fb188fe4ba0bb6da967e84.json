{"ast":null,"code":"var sys = require(\"util\"),\n    assert = require(\"assert\"),\n    XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest,\n    xhr = new XMLHttpRequest(),\n    http = require(\"http\"); // Test server\n\n\nvar server = http.createServer(function (req, res) {\n  // Test setRequestHeader\n  assert.equal(\"Foobar\", req.headers[\"x-test\"]); // Test non-conforming allowed header\n\n  assert.equal(\"node-XMLHttpRequest-test\", req.headers[\"user-agent\"]); // Test header set with blacklist disabled\n\n  assert.equal(\"http://github.com\", req.headers[\"referer\"]);\n  var body = \"Hello World\";\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body),\n    // Set cookie headers to see if they're correctly suppressed\n    // Actual values don't matter\n    \"Set-Cookie\": \"foo=bar\",\n    \"Set-Cookie2\": \"bar=baz\",\n    \"Date\": \"Thu, 30 Aug 2012 18:17:53 GMT\",\n    \"Connection\": \"close\"\n  });\n  res.write(\"Hello World\");\n  res.end();\n  this.close();\n}).listen(8000);\n\nxhr.onreadystatechange = function () {\n  if (this.readyState == 4) {\n    // Test getAllResponseHeaders()\n    var headers = \"content-type: text/plain\\r\\ncontent-length: 11\\r\\ndate: Thu, 30 Aug 2012 18:17:53 GMT\\r\\nconnection: close\";\n    assert.equal(headers, this.getAllResponseHeaders()); // Test case insensitivity\n\n    assert.equal('text/plain', this.getResponseHeader('Content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('Content-type'));\n    assert.equal('text/plain', this.getResponseHeader('content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('content-type')); // Test aborted getAllResponseHeaders\n\n    this.abort();\n    assert.equal(\"\", this.getAllResponseHeaders());\n    assert.equal(null, this.getResponseHeader(\"Connection\"));\n    console.log(\"done\");\n  }\n};\n\nassert.equal(null, xhr.getResponseHeader(\"Content-Type\"));\n\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\"); // Valid header\n\n  xhr.setRequestHeader(\"X-Test\", \"Foobar\"); // Invalid header\n\n  xhr.setRequestHeader(\"Content-Length\", 0); // Allowed header outside of specs\n\n  xhr.setRequestHeader(\"user-agent\", \"node-XMLHttpRequest-test\"); // Test getRequestHeader\n\n  assert.equal(\"Foobar\", xhr.getRequestHeader(\"X-Test\")); // Test invalid header\n\n  assert.equal(\"\", xhr.getRequestHeader(\"Content-Length\")); // Test allowing all headers\n\n  xhr.setDisableHeaderCheck(true);\n  xhr.setRequestHeader(\"Referer\", \"http://github.com\");\n  assert.equal(\"http://github.com\", xhr.getRequestHeader(\"Referer\"));\n  xhr.send();\n} catch (e) {\n  console.log(\"ERROR: Exception raised\", e);\n}","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/xmlhttprequest-ssl/tests/test-headers.js"],"names":["sys","require","assert","XMLHttpRequest","xhr","http","server","createServer","req","res","equal","headers","body","writeHead","Buffer","byteLength","write","end","close","listen","onreadystatechange","readyState","getAllResponseHeaders","getResponseHeader","abort","console","log","open","setRequestHeader","getRequestHeader","setDisableHeaderCheck","send","e"],"mappings":"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","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , xhr = new XMLHttpRequest()\n  , http = require(\"http\");\n\n// Test server\nvar server = http.createServer(function (req, res) {\n  // Test setRequestHeader\n  assert.equal(\"Foobar\", req.headers[\"x-test\"]);\n  // Test non-conforming allowed header\n  assert.equal(\"node-XMLHttpRequest-test\", req.headers[\"user-agent\"]);\n  // Test header set with blacklist disabled\n  assert.equal(\"http://github.com\", req.headers[\"referer\"]);\n\n  var body = \"Hello World\";\n  res.writeHead(200, {\n    \"Content-Type\": \"text/plain\",\n    \"Content-Length\": Buffer.byteLength(body),\n    // Set cookie headers to see if they're correctly suppressed\n    // Actual values don't matter\n    \"Set-Cookie\": \"foo=bar\",\n    \"Set-Cookie2\": \"bar=baz\",\n    \"Date\": \"Thu, 30 Aug 2012 18:17:53 GMT\",\n    \"Connection\": \"close\"\n  });\n  res.write(\"Hello World\");\n  res.end();\n\n  this.close();\n}).listen(8000);\n\nxhr.onreadystatechange = function() {\n  if (this.readyState == 4) {\n    // Test getAllResponseHeaders()\n    var headers = \"content-type: text/plain\\r\\ncontent-length: 11\\r\\ndate: Thu, 30 Aug 2012 18:17:53 GMT\\r\\nconnection: close\";\n    assert.equal(headers, this.getAllResponseHeaders());\n\n    // Test case insensitivity\n    assert.equal('text/plain', this.getResponseHeader('Content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('Content-type'));\n    assert.equal('text/plain', this.getResponseHeader('content-Type'));\n    assert.equal('text/plain', this.getResponseHeader('content-type'));\n\n    // Test aborted getAllResponseHeaders\n    this.abort();\n    assert.equal(\"\", this.getAllResponseHeaders());\n    assert.equal(null, this.getResponseHeader(\"Connection\"));\n\n    console.log(\"done\");\n  }\n};\n\nassert.equal(null, xhr.getResponseHeader(\"Content-Type\"));\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\");\n  // Valid header\n  xhr.setRequestHeader(\"X-Test\", \"Foobar\");\n  // Invalid header\n  xhr.setRequestHeader(\"Content-Length\", 0);\n  // Allowed header outside of specs\n  xhr.setRequestHeader(\"user-agent\", \"node-XMLHttpRequest-test\");\n  // Test getRequestHeader\n  assert.equal(\"Foobar\", xhr.getRequestHeader(\"X-Test\"));\n  // Test invalid header\n  assert.equal(\"\", xhr.getRequestHeader(\"Content-Length\"));\n\n  // Test allowing all headers\n  xhr.setDisableHeaderCheck(true);\n  xhr.setRequestHeader(\"Referer\", \"http://github.com\");\n  assert.equal(\"http://github.com\", xhr.getRequestHeader(\"Referer\"));\n\n  xhr.send();\n} catch(e) {\n  console.log(\"ERROR: Exception raised\", e);\n}\n"]},"metadata":{},"sourceType":"script"}