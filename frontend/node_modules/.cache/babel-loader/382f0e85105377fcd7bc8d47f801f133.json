{"ast":null,"code":"this.workbox = this.workbox || {};\n\nthis.workbox.routing = function (exports, assert_js, logger_js, WorkboxError_js, getFriendlyURL_js) {\n  'use strict';\n\n  try {\n    self['workbox:routing:5.1.4'] && _();\n  } catch (e) {}\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * The default HTTP method, 'GET', used when there's no specific method\n   * configured for a route.\n   *\n   * @type {string}\n   *\n   * @private\n   */\n\n\n  const defaultMethod = 'GET';\n  /**\n   * The list of valid HTTP methods associated with requests that could be routed.\n   *\n   * @type {Array<string>}\n   *\n   * @private\n   */\n\n  const validMethods = ['DELETE', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT'];\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * @param {function()|Object} handler Either a function, or an object with a\n   * 'handle' method.\n   * @return {Object} An object with a handle method.\n   *\n   * @private\n   */\n\n  const normalizeHandler = handler => {\n    if (handler && typeof handler === 'object') {\n      {\n        assert_js.assert.hasMethod(handler, 'handle', {\n          moduleName: 'workbox-routing',\n          className: 'Route',\n          funcName: 'constructor',\n          paramName: 'handler'\n        });\n      }\n      return handler;\n    } else {\n      {\n        assert_js.assert.isType(handler, 'function', {\n          moduleName: 'workbox-routing',\n          className: 'Route',\n          funcName: 'constructor',\n          paramName: 'handler'\n        });\n      }\n      return {\n        handle: handler\n      };\n    }\n  };\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n   * The \"match\" callback determine if a route should be used to \"handle\" a\n   * request by returning a non-falsy value if it can. The \"handler\" callback\n   * is called when there is a match and should return a Promise that resolves\n   * to a `Response`.\n   *\n   * @memberof module:workbox-routing\n   */\n\n\n  class Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n      {\n        assert_js.assert.isType(match, 'function', {\n          moduleName: 'workbox-routing',\n          className: 'Route',\n          funcName: 'constructor',\n          paramName: 'match'\n        });\n\n        if (method) {\n          assert_js.assert.isOneOf(method, validMethods, {\n            paramName: 'method'\n          });\n        }\n      } // These values are referenced directly by Router so cannot be\n      // altered by minificaton.\n\n      this.handler = normalizeHandler(handler);\n      this.match = match;\n      this.method = method;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * NavigationRoute makes it easy to create a\n   * [Route]{@link module:workbox-routing.Route} that matches for browser\n   * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n   *\n   * It will only match incoming Requests whose\n   * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n   * is set to `navigate`.\n   *\n   * You can optionally only apply this route to a subset of navigation requests\n   * by using one or both of the `denylist` and `allowlist` parameters.\n   *\n   * @memberof module:workbox-routing\n   * @extends module:workbox-routing.Route\n   */\n\n\n  class NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, {\n      allowlist = [/./],\n      denylist = []\n    } = {}) {\n      {\n        assert_js.assert.isArrayOfClass(allowlist, RegExp, {\n          moduleName: 'workbox-routing',\n          className: 'NavigationRoute',\n          funcName: 'constructor',\n          paramName: 'options.allowlist'\n        });\n        assert_js.assert.isArrayOfClass(denylist, RegExp, {\n          moduleName: 'workbox-routing',\n          className: 'NavigationRoute',\n          funcName: 'constructor',\n          paramName: 'options.denylist'\n        });\n      }\n      super(options => this._match(options), handler);\n      this._allowlist = allowlist;\n      this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n\n\n    _match({\n      url,\n      request\n    }) {\n      if (request && request.mode !== 'navigate') {\n        return false;\n      }\n\n      const pathnameAndSearch = url.pathname + url.search;\n\n      for (const regExp of this._denylist) {\n        if (regExp.test(pathnameAndSearch)) {\n          {\n            logger_js.logger.log(`The navigation route ${pathnameAndSearch} is not ` + `being used, since the URL matches this denylist pattern: ` + `${regExp}`);\n          }\n          return false;\n        }\n      }\n\n      if (this._allowlist.some(regExp => regExp.test(pathnameAndSearch))) {\n        {\n          logger_js.logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n        }\n        return true;\n      }\n\n      {\n        logger_js.logger.log(`The navigation route ${pathnameAndSearch} is not ` + `being used, since the URL being navigated to doesn't ` + `match the allowlist.`);\n      }\n      return false;\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * RegExpRoute makes it easy to create a regular expression based\n   * [Route]{@link module:workbox-routing.Route}.\n   *\n   * For same-origin requests the RegExp only needs to match part of the URL. For\n   * requests against third-party servers, you must define a RegExp that matches\n   * the start of the URL.\n   *\n   * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n   *\n   * @memberof module:workbox-routing\n   * @extends module:workbox-routing.Route\n   */\n\n\n  class RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n      {\n        assert_js.assert.isInstance(regExp, RegExp, {\n          moduleName: 'workbox-routing',\n          className: 'RegExpRoute',\n          funcName: 'constructor',\n          paramName: 'pattern'\n        });\n      }\n\n      const match = ({\n        url\n      }) => {\n        const result = regExp.exec(url.href); // Return immediately if there's no match.\n\n        if (!result) {\n          return;\n        } // Require that the match start at the first character in the URL string\n        // if it's a cross-origin request.\n        // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n        // behind this behavior.\n\n\n        if (url.origin !== location.origin && result.index !== 0) {\n          {\n            logger_js.logger.debug(`The regular expression '${regExp}' only partially matched ` + `against the cross-origin URL '${url}'. RegExpRoute's will only ` + `handle cross-origin requests if they match the entire URL.`);\n          }\n          return;\n        } // If the route matches, but there aren't any capture groups defined, then\n        // this will return [], which is truthy and therefore sufficient to\n        // indicate a match.\n        // If there are capture groups, then it will return their values.\n\n\n        return result.slice(1);\n      };\n\n      super(match, handler, method);\n    }\n\n  }\n  /*\n    Copyright 2018 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * The Router can be used to process a FetchEvent through one or more\n   * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n   * a matching route exists.\n   *\n   * If no route matches a given a request, the Router will use a \"default\"\n   * handler if one is defined.\n   *\n   * Should the matching Route throw an error, the Router will use a \"catch\"\n   * handler if one is defined to gracefully deal with issues and respond with a\n   * Request.\n   *\n   * If a request matches multiple routes, the **earliest** registered route will\n   * be used to respond to the request.\n   *\n   * @memberof module:workbox-routing\n   */\n\n\n  class Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n      this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n\n\n    get routes() {\n      return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n\n\n    addFetchListener() {\n      // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n      self.addEventListener('fetch', event => {\n        const {\n          request\n        } = event;\n        const responsePromise = this.handleRequest({\n          request,\n          event\n        });\n\n        if (responsePromise) {\n          event.respondWith(responsePromise);\n        }\n      });\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n\n\n    addCacheListener() {\n      // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n      self.addEventListener('message', event => {\n        if (event.data && event.data.type === 'CACHE_URLS') {\n          const {\n            payload\n          } = event.data;\n          {\n            logger_js.logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n          }\n          const requestPromises = Promise.all(payload.urlsToCache.map(entry => {\n            if (typeof entry === 'string') {\n              entry = [entry];\n            }\n\n            const request = new Request(...entry);\n            return this.handleRequest({\n              request\n            }); // TODO(philipwalton): TypeScript errors without this typecast for\n            // some reason (probably a bug). The real type here should work but\n            // doesn't: `Array<Promise<Response> | undefined>`.\n          })); // TypeScript\n\n          event.waitUntil(requestPromises); // If a MessageChannel was used, reply to the message on success.\n\n          if (event.ports && event.ports[0]) {\n            requestPromises.then(() => event.ports[0].postMessage(true));\n          }\n        }\n      });\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n\n\n    handleRequest({\n      request,\n      event\n    }) {\n      {\n        assert_js.assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'handleRequest',\n          paramName: 'options.request'\n        });\n      }\n      const url = new URL(request.url, location.href);\n\n      if (!url.protocol.startsWith('http')) {\n        {\n          logger_js.logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n        }\n        return;\n      }\n\n      const {\n        params,\n        route\n      } = this.findMatchingRoute({\n        url,\n        request,\n        event\n      });\n      let handler = route && route.handler;\n      const debugMessages = [];\n      {\n        if (handler) {\n          debugMessages.push([`Found a route to handle this request:`, route]);\n\n          if (params) {\n            debugMessages.push([`Passing the following params to the route's handler:`, params]);\n          }\n        }\n      } // If we don't have a handler because there was no matching route, then\n      // fall back to defaultHandler if that's defined.\n\n      if (!handler && this._defaultHandler) {\n        {\n          debugMessages.push(`Failed to find a matching route. Falling ` + `back to the default handler.`);\n        }\n        handler = this._defaultHandler;\n      }\n\n      if (!handler) {\n        {\n          // No handler so Workbox will do nothing. If logs is set of debug\n          // i.e. verbose, we should print out this information.\n          logger_js.logger.debug(`No route found for: ${getFriendlyURL_js.getFriendlyURL(url)}`);\n        }\n        return;\n      }\n\n      {\n        // We have a handler, meaning Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger_js.logger.groupCollapsed(`Router is responding to: ${getFriendlyURL_js.getFriendlyURL(url)}`);\n        debugMessages.forEach(msg => {\n          if (Array.isArray(msg)) {\n            logger_js.logger.log(...msg);\n          } else {\n            logger_js.logger.log(msg);\n          }\n        });\n        logger_js.logger.groupEnd();\n      } // Wrap in try and catch in case the handle method throws a synchronous\n      // error. It should still callback to the catch handler.\n\n      let responsePromise;\n\n      try {\n        responsePromise = handler.handle({\n          url,\n          request,\n          event,\n          params\n        });\n      } catch (err) {\n        responsePromise = Promise.reject(err);\n      }\n\n      if (responsePromise instanceof Promise && this._catchHandler) {\n        responsePromise = responsePromise.catch(err => {\n          {\n            // Still include URL here as it will be async from the console group\n            // and may not make sense without the URL\n            logger_js.logger.groupCollapsed(`Error thrown when responding to: ` + ` ${getFriendlyURL_js.getFriendlyURL(url)}. Falling back to Catch Handler.`);\n            logger_js.logger.error(`Error thrown by:`, route);\n            logger_js.logger.error(err);\n            logger_js.logger.groupEnd();\n          }\n          return this._catchHandler.handle({\n            url,\n            request,\n            event\n          });\n        });\n      }\n\n      return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n\n\n    findMatchingRoute({\n      url,\n      request,\n      event\n    }) {\n      {\n        assert_js.assert.isInstance(url, URL, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'findMatchingRoute',\n          paramName: 'options.url'\n        });\n        assert_js.assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'findMatchingRoute',\n          paramName: 'options.request'\n        });\n      }\n      const routes = this._routes.get(request.method) || [];\n\n      for (const route of routes) {\n        let params;\n        const matchResult = route.match({\n          url,\n          request,\n          event\n        });\n\n        if (matchResult) {\n          // See https://github.com/GoogleChrome/workbox/issues/2079\n          params = matchResult;\n\n          if (Array.isArray(matchResult) && matchResult.length === 0) {\n            // Instead of passing an empty array in as params, use undefined.\n            params = undefined;\n          } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n            // Instead of passing an empty object in as params, use undefined.\n            params = undefined;\n          } else if (typeof matchResult === 'boolean') {\n            // For the boolean value true (rather than just something truth-y),\n            // don't set params.\n            // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n            params = undefined;\n          } // Return early if have a match.\n\n\n          return {\n            route,\n            params\n          };\n        }\n      } // If no match was found above, return and empty object.\n\n\n      return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n\n    setDefaultHandler(handler) {\n      this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n\n    setCatchHandler(handler) {\n      this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n\n\n    registerRoute(route) {\n      {\n        assert_js.assert.isType(route, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert_js.assert.hasMethod(route, 'match', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert_js.assert.isType(route.handler, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert_js.assert.hasMethod(route.handler, 'handle', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.handler'\n        });\n        assert_js.assert.isType(route.method, 'string', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.method'\n        });\n      }\n\n      if (!this._routes.has(route.method)) {\n        this._routes.set(route.method, []);\n      } // Give precedence to all of the earlier routes by adding this additional\n      // route to the end of the array.\n\n\n      this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n\n\n    unregisterRoute(route) {\n      if (!this._routes.has(route.method)) {\n        throw new WorkboxError_js.WorkboxError('unregister-route-but-not-found-with-method', {\n          method: route.method\n        });\n      }\n\n      const routeIndex = this._routes.get(route.method).indexOf(route);\n\n      if (routeIndex > -1) {\n        this._routes.get(route.method).splice(routeIndex, 1);\n      } else {\n        throw new WorkboxError_js.WorkboxError('unregister-route-route-not-registered');\n      }\n    }\n\n  }\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n\n  let defaultRouter;\n  /**\n   * Creates a new, singleton Router instance if one does not exist. If one\n   * does already exist, that instance is returned.\n   *\n   * @private\n   * @return {Router}\n   */\n\n  const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n      defaultRouter = new Router(); // The helpers that use the default Router assume these listeners exist.\n\n      defaultRouter.addFetchListener();\n      defaultRouter.addCacheListener();\n    }\n\n    return defaultRouter;\n  };\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Easily register a RegExp, string, or function with a caching\n   * strategy to a singleton Router instance.\n   *\n   * This method will generate a Route for you if needed and\n   * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n   *\n   * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n   * If the capture param is a `Route`, all other arguments will be ignored.\n   * @param {module:workbox-routing~handlerCallback} [handler] A callback\n   * function that returns a Promise resulting in a Response. This parameter\n   * is required if `capture` is not a `Route` object.\n   * @param {string} [method='GET'] The HTTP method to match the Route\n   * against.\n   * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n   * unregistering).\n   *\n   * @memberof module:workbox-routing\n   */\n\n\n  function registerRoute(capture, handler, method) {\n    let route;\n\n    if (typeof capture === 'string') {\n      const captureUrl = new URL(capture, location.href);\n      {\n        if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n          throw new WorkboxError_js.WorkboxError('invalid-string', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture'\n          });\n        } // We want to check if Express-style wildcards are in the pathname only.\n        // TODO: Remove this log message in v4.\n\n\n        const valueToCheck = capture.startsWith('http') ? captureUrl.pathname : capture; // See https://github.com/pillarjs/path-to-regexp#parameters\n\n        const wildcards = '[*:?+]';\n\n        if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n          logger_js.logger.debug(`The '$capture' parameter contains an Express-style wildcard ` + `character (${wildcards}). Strings are now always interpreted as ` + `exact matches; use a RegExp for partial or wildcard matches.`);\n        }\n      }\n\n      const matchCallback = ({\n        url\n      }) => {\n        {\n          if (url.pathname === captureUrl.pathname && url.origin !== captureUrl.origin) {\n            logger_js.logger.debug(`${capture} only partially matches the cross-origin URL ` + `${url}. This route will only handle cross-origin requests ` + `if they match the entire URL.`);\n          }\n        }\n        return url.href === captureUrl.href;\n      }; // If `capture` is a string then `handler` and `method` must be present.\n\n\n      route = new Route(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) {\n      // If `capture` is a `RegExp` then `handler` and `method` must be present.\n      route = new RegExpRoute(capture, handler, method);\n    } else if (typeof capture === 'function') {\n      // If `capture` is a function then `handler` and `method` must be present.\n      route = new Route(capture, handler, method);\n    } else if (capture instanceof Route) {\n      route = capture;\n    } else {\n      throw new WorkboxError_js.WorkboxError('unsupported-route-type', {\n        moduleName: 'workbox-routing',\n        funcName: 'registerRoute',\n        paramName: 'capture'\n      });\n    }\n\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n  }\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * If a Route throws an error while handling a request, this `handler`\n   * will be called and given a chance to provide a response.\n   *\n   * @param {module:workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   *\n   * @memberof module:workbox-routing\n   */\n\n\n  function setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n  }\n  /*\n    Copyright 2019 Google LLC\n     Use of this source code is governed by an MIT-style\n    license that can be found in the LICENSE file or at\n    https://opensource.org/licenses/MIT.\n  */\n\n  /**\n   * Define a default `handler` that's called when no routes explicitly\n   * match the incoming request.\n   *\n   * Without a default handler, unmatched requests will go against the\n   * network as if there were no service worker present.\n   *\n   * @param {module:workbox-routing~handlerCallback} handler A callback\n   * function that returns a Promise resulting in a Response.\n   *\n   * @memberof module:workbox-routing\n   */\n\n\n  function setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n  }\n\n  exports.NavigationRoute = NavigationRoute;\n  exports.RegExpRoute = RegExpRoute;\n  exports.Route = Route;\n  exports.Router = Router;\n  exports.registerRoute = registerRoute;\n  exports.setCatchHandler = setCatchHandler;\n  exports.setDefaultHandler = setDefaultHandler;\n  return exports;\n}({}, workbox.core._private, workbox.core._private, workbox.core._private, workbox.core._private);","map":{"version":3,"sources":["../_version.js","../utils/constants.js","../utils/normalizeHandler.js","../Route.js","../NavigationRoute.js","../RegExpRoute.js","../Router.js","../utils/getOrCreateDefaultRouter.js","../registerRoute.js","../setCatchHandler.js","../setDefaultHandler.js"],"names":["self","_","defaultMethod","validMethods","normalizeHandler","handler","assert","moduleName","className","funcName","paramName","handle","constructor","method","allowlist","denylist","options","_match","request","pathnameAndSearch","url","regExp","logger","match","result","location","routes","addFetchListener","event","responsePromise","addCacheListener","payload","requestPromises","entry","handleRequest","route","debugMessages","getFriendlyURL","msg","Array","params","Promise","err","findMatchingRoute","matchResult","Object","setDefaultHandler","setCatchHandler","registerRoute","unregisterRoute","WorkboxError","routeIndex","getOrCreateDefaultRouter","defaultRouter","captureUrl","capture","valueToCheck","wildcards","matchCallback"],"mappings":"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","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * [Route]{@link module:workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` +\n                    `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n"]},"metadata":{},"sourceType":"script"}