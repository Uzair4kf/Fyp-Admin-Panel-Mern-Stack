{"ast":null,"code":"try {\n  self[\"workbox:window:5.1.4\"] && _();\n} catch (t) {}\n\nfunction t(t, s) {\n  return new Promise(i => {\n    const e = new MessageChannel();\n    e.port1.onmessage = t => {\n      i(t.data);\n    }, t.postMessage(s, [e.port2]);\n  });\n}\n\ntry {\n  self[\"workbox:core:5.1.4\"] && _();\n} catch (t) {}\n\nclass s {\n  constructor() {\n    this.promise = new Promise((t, s) => {\n      this.resolve = t, this.reject = s;\n    });\n  }\n\n}\n\nfunction i(t, s) {\n  const {\n    href: i\n  } = location;\n  return new URL(t, i).href === new URL(s, i).href;\n}\n\nclass e {\n  constructor(t, s) {\n    this.type = t, Object.assign(this, s);\n  }\n\n}\n\nclass h extends class {\n  constructor() {\n    this.t = new Map();\n  }\n\n  addEventListener(t, s) {\n    this.s(t).add(s);\n  }\n\n  removeEventListener(t, s) {\n    this.s(t).delete(s);\n  }\n\n  dispatchEvent(t) {\n    t.target = this;\n    const s = this.s(t.type);\n\n    for (const i of s) i(t);\n  }\n\n  s(t) {\n    return this.t.has(t) || this.t.set(t, new Set()), this.t.get(t);\n  }\n\n} {\n  constructor(t, h = {}) {\n    super(), this.i = {}, this.h = 0, this.o = new s(), this.g = new s(), this.l = new s(), this.u = 0, this.v = new Set(), this.m = () => {\n      const t = this.p,\n            s = t.installing;\n      this.h > 0 || !i(s.scriptURL, this.S) || performance.now() > this.u + 6e4 ? (this.L = s, t.removeEventListener(\"updatefound\", this.m)) : (this._ = s, this.v.add(s), this.o.resolve(s)), ++this.h, s.addEventListener(\"statechange\", this.P);\n    }, this.P = t => {\n      const s = this.p,\n            i = t.target,\n            {\n        state: h\n      } = i,\n            n = i === this.L,\n            a = n ? \"external\" : \"\",\n            r = {\n        sw: i,\n        originalEvent: t\n      };\n      !n && this.W && (r.isUpdate = !0), this.dispatchEvent(new e(a + h, r)), \"installed\" === h ? this.B = self.setTimeout(() => {\n        \"installed\" === h && s.waiting === i && this.dispatchEvent(new e(a + \"waiting\", r));\n      }, 200) : \"activating\" === h && (clearTimeout(this.B), n || this.g.resolve(i));\n    }, this.C = t => {\n      const s = this._;\n      s === navigator.serviceWorker.controller && (this.dispatchEvent(new e(\"controlling\", {\n        sw: s,\n        originalEvent: t,\n        isUpdate: this.W\n      })), this.l.resolve(s));\n    }, this.R = async t => {\n      const {\n        data: s,\n        source: i\n      } = t;\n      await this.getSW(), this.v.has(i) && this.dispatchEvent(new e(\"message\", {\n        data: s,\n        sw: i,\n        originalEvent: t\n      }));\n    }, this.S = t, this.i = h, navigator.serviceWorker.addEventListener(\"message\", this.R);\n  }\n\n  async register({\n    immediate: t = !1\n  } = {}) {\n    t || \"complete\" === document.readyState || (await new Promise(t => window.addEventListener(\"load\", t))), this.W = Boolean(navigator.serviceWorker.controller), this.U = this.M(), this.p = await this.T(), this.U && (this._ = this.U, this.g.resolve(this.U), this.l.resolve(this.U), this.U.addEventListener(\"statechange\", this.P, {\n      once: !0\n    }));\n    const s = this.p.waiting;\n    return s && i(s.scriptURL, this.S) && (this._ = s, Promise.resolve().then(() => {\n      this.dispatchEvent(new e(\"waiting\", {\n        sw: s,\n        wasWaitingBeforeRegister: !0\n      }));\n    }).then(() => {})), this._ && (this.o.resolve(this._), this.v.add(this._)), this.p.addEventListener(\"updatefound\", this.m), navigator.serviceWorker.addEventListener(\"controllerchange\", this.C, {\n      once: !0\n    }), this.p;\n  }\n\n  async update() {\n    this.p && (await this.p.update());\n  }\n\n  get active() {\n    return this.g.promise;\n  }\n\n  get controlling() {\n    return this.l.promise;\n  }\n\n  async getSW() {\n    return void 0 !== this._ ? this._ : this.o.promise;\n  }\n\n  async messageSW(s) {\n    return t(await this.getSW(), s);\n  }\n\n  M() {\n    const t = navigator.serviceWorker.controller;\n    return t && i(t.scriptURL, this.S) ? t : void 0;\n  }\n\n  async T() {\n    try {\n      const t = await navigator.serviceWorker.register(this.S, this.i);\n      return this.u = performance.now(), t;\n    } catch (t) {\n      throw t;\n    }\n  }\n\n}\n\nexport { h as Workbox, t as messageSW };","map":{"version":3,"sources":["../_version.js","../messageSW.js","../../workbox-core/_version.js","../../workbox-core/_private/Deferred.js","../utils/urlsMatch.js","../utils/WorkboxEvent.js","../Workbox.js","../utils/WorkboxEventTarget.js","../../workbox-core/_private/dontWaitFor.js"],"names":["self","_","e","messageSW","sw","data","Promise","resolve","messageChannel","MessageChannel","port1","onmessage","event","postMessage","port2","Deferred","constructor","promise","reject","urlsMatch","url1","url2","href","location","URL","WorkboxEvent","type","props","Object","assign","this","Workbox","scriptURL","registerOptions","_registerOptions","_updateFoundCount","_swDeferred","_activeDeferred","_controllingDeferred","_registrationTime","_ownSWs","Set","_onUpdateFound","registration","_registration","installingSW","installing","_scriptURL","performance","now","_externalSW","removeEventListener","_sw","add","addEventListener","_onStateChange","originalEvent","target","state","isExternal","eventPrefix","eventProps","_isUpdate","isUpdate","dispatchEvent","_waitingTimeout","setTimeout","waiting","clearTimeout","_onControllerChange","navigator","serviceWorker","controller","_onMessage","async","source","getSW","has","immediate","document","readyState","res","window","Boolean","_compatibleControllingSW","_getControllingSWIfCompatible","_registerScript","once","waitingSW","then","wasWaitingBeforeRegister","update","undefined","reg","register","error","_eventListenerRegistry","Map","listener","_getEventListenersByType","delete","listeners","set","get"],"mappings":"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","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:window:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport './_version.js';\n/**\n * Sends a data object to a service worker via `postMessage` and resolves with\n * a response (if any).\n *\n * A response can be set in a message handler in the service worker by\n * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n * returned by `messageSW()`. If no response is set, the promise will not\n * resolve.\n *\n * @param {ServiceWorker} sw The service worker to send the message to.\n * @param {Object} data An object to send to the service worker.\n * @return {Promise<Object|undefined>}\n * @memberof module:workbox-window\n */\nfunction messageSW(sw, data) {\n    return new Promise((resolve) => {\n        const messageChannel = new MessageChannel();\n        messageChannel.port1.onmessage = (event) => {\n            resolve(event.data);\n        };\n        sw.postMessage(data, [messageChannel.port2]);\n    });\n}\nexport { messageSW };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns true if two URLs have the same `.href` property. The URLS can be\n * relative, and if they are the current location href is used to resolve URLs.\n *\n * @private\n * @param {string} url1\n * @param {string} url2\n * @return {boolean}\n */\nexport function urlsMatch(url1, url2) {\n    const { href } = location;\n    return new URL(url1, href).href === new URL(url2, href).href;\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A minimal `Event` subclass shim.\n * This doesn't *actually* subclass `Event` because not all browsers support\n * constructable `EventTarget`, and using a real `Event` will error.\n * @private\n */\nexport class WorkboxEvent {\n    constructor(type, props) {\n        this.type = type;\n        Object.assign(this, props);\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { messageSW } from './messageSW.js';\nimport { WorkboxEventTarget } from './utils/WorkboxEventTarget.js';\nimport { urlsMatch } from './utils/urlsMatch.js';\nimport { WorkboxEvent } from './utils/WorkboxEvent.js';\nimport './_version.js';\n// The time a SW must be in the waiting phase before we can conclude\n// `skipWaiting()` wasn't called. This 200 amount wasn't scientifically\n// chosen, but it seems to avoid false positives in my testing.\nconst WAITING_TIMEOUT_DURATION = 200;\n// The amount of time after a registration that we can reasonably conclude\n// that the registration didn't trigger an update.\nconst REGISTRATION_TIMEOUT_DURATION = 60000;\n/**\n * A class to aid in handling service worker registration, updates, and\n * reacting to service worker lifecycle events.\n *\n * @fires [message]{@link module:workbox-window.Workbox#message}\n * @fires [installed]{@link module:workbox-window.Workbox#installed}\n * @fires [waiting]{@link module:workbox-window.Workbox#waiting}\n * @fires [controlling]{@link module:workbox-window.Workbox#controlling}\n * @fires [activated]{@link module:workbox-window.Workbox#activated}\n * @fires [redundant]{@link module:workbox-window.Workbox#redundant}\n * @fires [externalinstalled]{@link module:workbox-window.Workbox#externalinstalled}\n * @fires [externalwaiting]{@link module:workbox-window.Workbox#externalwaiting}\n * @fires [externalactivated]{@link module:workbox-window.Workbox#externalactivated}\n * @memberof module:workbox-window\n */\nclass Workbox extends WorkboxEventTarget {\n    /**\n     * Creates a new Workbox instance with a script URL and service worker\n     * options. The script URL and options are the same as those used when\n     * calling `navigator.serviceWorker.register(scriptURL, options)`. See:\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     *\n     * @param {string} scriptURL The service worker script associated with this\n     *     instance.\n     * @param {Object} [registerOptions] The service worker options associated\n     *     with this instance.\n     */\n    constructor(scriptURL, registerOptions = {}) {\n        super();\n        this._registerOptions = {};\n        this._updateFoundCount = 0;\n        // Deferreds we can resolve later.\n        this._swDeferred = new Deferred();\n        this._activeDeferred = new Deferred();\n        this._controllingDeferred = new Deferred();\n        this._registrationTime = 0;\n        this._ownSWs = new Set();\n        /**\n         * @private\n         */\n        this._onUpdateFound = () => {\n            // `this._registration` will never be `undefined` after an update is found.\n            const registration = this._registration;\n            const installingSW = registration.installing;\n            // If the script URL passed to `navigator.serviceWorker.register()` is\n            // different from the current controlling SW's script URL, we know any\n            // successful registration calls will trigger an `updatefound` event.\n            // But if the registered script URL is the same as the current controlling\n            // SW's script URL, we'll only get an `updatefound` event if the file\n            // changed since it was last registered. This can be a problem if the user\n            // opens up the same page in a different tab, and that page registers\n            // a SW that triggers an update. It's a problem because this page has no\n            // good way of knowing whether the `updatefound` event came from the SW\n            // script it registered or from a registration attempt made by a newer\n            // version of the page running in another tab.\n            // To minimize the possibility of a false positive, we use the logic here:\n            const updateLikelyTriggeredExternally = \n            // Since we enforce only calling `register()` once, and since we don't\n            // add the `updatefound` event listener until the `register()` call, if\n            // `_updateFoundCount` is > 0 then it means this method has already\n            // been called, thus this SW must be external\n            this._updateFoundCount > 0 ||\n                // If the script URL of the installing SW is different from this\n                // instance's script URL, we know it's definitely not from our\n                // registration.\n                !urlsMatch(installingSW.scriptURL, this._scriptURL) ||\n                // If all of the above are false, then we use a time-based heuristic:\n                // Any `updatefound` event that occurs long after our registration is\n                // assumed to be external.\n                (performance.now() >\n                    this._registrationTime + REGISTRATION_TIMEOUT_DURATION) ?\n                // If any of the above are not true, we assume the update was\n                // triggered by this instance.\n                true : false;\n            if (updateLikelyTriggeredExternally) {\n                this._externalSW = installingSW;\n                registration.removeEventListener('updatefound', this._onUpdateFound);\n            }\n            else {\n                // If the update was not triggered externally we know the installing\n                // SW is the one we registered, so we set it.\n                this._sw = installingSW;\n                this._ownSWs.add(installingSW);\n                this._swDeferred.resolve(installingSW);\n                // The `installing` state isn't something we have a dedicated\n                // callback for, but we do log messages for it in development.\n                if (process.env.NODE_ENV !== 'production') {\n                    if (navigator.serviceWorker.controller) {\n                        logger.log('Updated service worker found. Installing now...');\n                    }\n                    else {\n                        logger.log('Service worker is installing...');\n                    }\n                }\n            }\n            // Increment the `updatefound` count, so future invocations of this\n            // method can be sure they were triggered externally.\n            ++this._updateFoundCount;\n            // Add a `statechange` listener regardless of whether this update was\n            // triggered externally, since we have callbacks for both.\n            installingSW.addEventListener('statechange', this._onStateChange);\n        };\n        /**\n         * @private\n         * @param {Event} originalEvent\n         */\n        this._onStateChange = (originalEvent) => {\n            // `this._registration` will never be `undefined` after an update is found.\n            const registration = this._registration;\n            const sw = originalEvent.target;\n            const { state } = sw;\n            const isExternal = sw === this._externalSW;\n            const eventPrefix = isExternal ? 'external' : '';\n            const eventProps = {\n                sw,\n                originalEvent\n            };\n            if (!isExternal && this._isUpdate) {\n                eventProps.isUpdate = true;\n            }\n            this.dispatchEvent(new WorkboxEvent(eventPrefix + state, eventProps));\n            if (state === 'installed') {\n                // This timeout is used to ignore cases where the service worker calls\n                // `skipWaiting()` in the install event, thus moving it directly in the\n                // activating state. (Since all service workers *must* go through the\n                // waiting phase, the only way to detect `skipWaiting()` called in the\n                // install event is to observe that the time spent in the waiting phase\n                // is very short.)\n                // NOTE: we don't need separate timeouts for the own and external SWs\n                // since they can't go through these phases at the same time.\n                this._waitingTimeout = self.setTimeout(() => {\n                    // Ensure the SW is still waiting (it may now be redundant).\n                    if (state === 'installed' && registration.waiting === sw) {\n                        this.dispatchEvent(new WorkboxEvent(eventPrefix + 'waiting', eventProps));\n                        if (process.env.NODE_ENV !== 'production') {\n                            if (isExternal) {\n                                logger.warn('An external service worker has installed but is ' +\n                                    'waiting for this client to close before activating...');\n                            }\n                            else {\n                                logger.warn('The service worker has installed but is waiting ' +\n                                    'for existing clients to close before activating...');\n                            }\n                        }\n                    }\n                }, WAITING_TIMEOUT_DURATION);\n            }\n            else if (state === 'activating') {\n                clearTimeout(this._waitingTimeout);\n                if (!isExternal) {\n                    this._activeDeferred.resolve(sw);\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                switch (state) {\n                    case 'installed':\n                        if (isExternal) {\n                            logger.warn('An external service worker has installed. ' +\n                                'You may want to suggest users reload this page.');\n                        }\n                        else {\n                            logger.log('Registered service worker installed.');\n                        }\n                        break;\n                    case 'activated':\n                        if (isExternal) {\n                            logger.warn('An external service worker has activated.');\n                        }\n                        else {\n                            logger.log('Registered service worker activated.');\n                            if (sw !== navigator.serviceWorker.controller) {\n                                logger.warn('The registered service worker is active but ' +\n                                    'not yet controlling the page. Reload or run ' +\n                                    '`clients.claim()` in the service worker.');\n                            }\n                        }\n                        break;\n                    case 'redundant':\n                        if (sw === this._compatibleControllingSW) {\n                            logger.log('Previously controlling service worker now redundant!');\n                        }\n                        else if (!isExternal) {\n                            logger.log('Registered service worker now redundant!');\n                        }\n                        break;\n                }\n            }\n        };\n        /**\n         * @private\n         * @param {Event} originalEvent\n         */\n        this._onControllerChange = (originalEvent) => {\n            const sw = this._sw;\n            if (sw === navigator.serviceWorker.controller) {\n                this.dispatchEvent(new WorkboxEvent('controlling', {\n                    sw,\n                    originalEvent,\n                    isUpdate: this._isUpdate,\n                }));\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log('Registered service worker now controlling this page.');\n                }\n                this._controllingDeferred.resolve(sw);\n            }\n        };\n        /**\n         * @private\n         * @param {Event} originalEvent\n         */\n        this._onMessage = async (originalEvent) => {\n            const { data, source } = originalEvent;\n            // Wait until there's an \"own\" service worker. This is used to buffer\n            // `message` events that may be received prior to calling `register()`.\n            await this.getSW();\n            // If the service worker that sent the message is in the list of own\n            // service workers for this instance, dispatch a `message` event.\n            // NOTE: we check for all previously owned service workers rather than\n            // just the current one because some messages (e.g. cache updates) use\n            // a timeout when sent and may be delayed long enough for a service worker\n            // update to be found.\n            if (this._ownSWs.has(source)) {\n                this.dispatchEvent(new WorkboxEvent('message', {\n                    data,\n                    sw: source,\n                    originalEvent,\n                }));\n            }\n        };\n        this._scriptURL = scriptURL;\n        this._registerOptions = registerOptions;\n        // Add a message listener immediately since messages received during\n        // page load are buffered only until the DOMContentLoaded event:\n        // https://github.com/GoogleChrome/workbox/issues/2202\n        navigator.serviceWorker.addEventListener('message', this._onMessage);\n    }\n    /**\n     * Registers a service worker for this instances script URL and service\n     * worker options. By default this method delays registration until after\n     * the window has loaded.\n     *\n     * @param {Object} [options]\n     * @param {Function} [options.immediate=false] Setting this to true will\n     *     register the service worker immediately, even if the window has\n     *     not loaded (not recommended).\n     */\n    async register({ immediate = false } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._registrationTime) {\n                logger.error('Cannot re-register a Workbox instance after it has ' +\n                    'been registered. Create a new instance instead.');\n                return;\n            }\n        }\n        if (!immediate && document.readyState !== 'complete') {\n            await new Promise((res) => window.addEventListener('load', res));\n        }\n        // Set this flag to true if any service worker was controlling the page\n        // at registration time.\n        this._isUpdate = Boolean(navigator.serviceWorker.controller);\n        // Before registering, attempt to determine if a SW is already controlling\n        // the page, and if that SW script (and version, if specified) matches this\n        // instance's script.\n        this._compatibleControllingSW = this._getControllingSWIfCompatible();\n        this._registration = await this._registerScript();\n        // If we have a compatible controller, store the controller as the \"own\"\n        // SW, resolve active/controlling deferreds and add necessary listeners.\n        if (this._compatibleControllingSW) {\n            this._sw = this._compatibleControllingSW;\n            this._activeDeferred.resolve(this._compatibleControllingSW);\n            this._controllingDeferred.resolve(this._compatibleControllingSW);\n            this._compatibleControllingSW.addEventListener('statechange', this._onStateChange, { once: true });\n        }\n        // If there's a waiting service worker with a matching URL before the\n        // `updatefound` event fires, it likely means that this site is open\n        // in another tab, or the user refreshed the page (and thus the previous\n        // page wasn't fully unloaded before this page started loading).\n        // https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#waiting\n        const waitingSW = this._registration.waiting;\n        if (waitingSW && urlsMatch(waitingSW.scriptURL, this._scriptURL)) {\n            // Store the waiting SW as the \"own\" Sw, even if it means overwriting\n            // a compatible controller.\n            this._sw = waitingSW;\n            // Run this in the next microtask, so any code that adds an event\n            // listener after awaiting `register()` will get this event.\n            dontWaitFor(Promise.resolve().then(() => {\n                this.dispatchEvent(new WorkboxEvent('waiting', {\n                    sw: waitingSW,\n                    wasWaitingBeforeRegister: true,\n                }));\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.warn('A service worker was already waiting to activate ' +\n                        'before this script was registered...');\n                }\n            }));\n        }\n        // If an \"own\" SW is already set, resolve the deferred.\n        if (this._sw) {\n            this._swDeferred.resolve(this._sw);\n            this._ownSWs.add(this._sw);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log('Successfully registered service worker.', this._scriptURL);\n            if (navigator.serviceWorker.controller) {\n                if (this._compatibleControllingSW) {\n                    logger.debug('A service worker with the same script URL ' +\n                        'is already controlling this page.');\n                }\n                else {\n                    logger.debug('A service worker with a different script URL is ' +\n                        'currently controlling the page. The browser is now fetching ' +\n                        'the new script now...');\n                }\n            }\n            const currentPageIsOutOfScope = () => {\n                const scopeURL = new URL(this._registerOptions.scope || this._scriptURL, document.baseURI);\n                const scopeURLBasePath = new URL('./', scopeURL.href).pathname;\n                return !location.pathname.startsWith(scopeURLBasePath);\n            };\n            if (currentPageIsOutOfScope()) {\n                logger.warn('The current page is not in scope for the registered ' +\n                    'service worker. Was this a mistake?');\n            }\n        }\n        this._registration.addEventListener('updatefound', this._onUpdateFound);\n        navigator.serviceWorker.addEventListener('controllerchange', this._onControllerChange, { once: true });\n        return this._registration;\n    }\n    /**\n     * Checks for updates of the registered service worker.\n     */\n    async update() {\n        if (!this._registration) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error('Cannot update a Workbox instance without ' +\n                    'being registered. Register the Workbox instance first.');\n            }\n            return;\n        }\n        // Try to update registration\n        await this._registration.update();\n    }\n    /**\n     * Resolves to the service worker registered by this instance as soon as it\n     * is active. If a service worker was already controlling at registration\n     * time then it will resolve to that if the script URLs (and optionally\n     * script versions) match, otherwise it will wait until an update is found\n     * and activates.\n     *\n     * @return {Promise<ServiceWorker>}\n     */\n    get active() {\n        return this._activeDeferred.promise;\n    }\n    /**\n     * Resolves to the service worker registered by this instance as soon as it\n     * is controlling the page. If a service worker was already controlling at\n     * registration time then it will resolve to that if the script URLs (and\n     * optionally script versions) match, otherwise it will wait until an update\n     * is found and starts controlling the page.\n     * Note: the first time a service worker is installed it will active but\n     * not start controlling the page unless `clients.claim()` is called in the\n     * service worker.\n     *\n     * @return {Promise<ServiceWorker>}\n     */\n    get controlling() {\n        return this._controllingDeferred.promise;\n    }\n    /**\n     * Resolves with a reference to a service worker that matches the script URL\n     * of this instance, as soon as it's available.\n     *\n     * If, at registration time, there's already an active or waiting service\n     * worker with a matching script URL, it will be used (with the waiting\n     * service worker taking precedence over the active service worker if both\n     * match, since the waiting service worker would have been registered more\n     * recently).\n     * If there's no matching active or waiting service worker at registration\n     * time then the promise will not resolve until an update is found and starts\n     * installing, at which point the installing service worker is used.\n     *\n     * @return {Promise<ServiceWorker>}\n     */\n    async getSW() {\n        // If `this._sw` is set, resolve with that as we want `getSW()` to\n        // return the correct (new) service worker if an update is found.\n        return this._sw !== undefined ? this._sw : this._swDeferred.promise;\n    }\n    /**\n     * Sends the passed data object to the service worker registered by this\n     * instance (via [`getSW()`]{@link module:workbox-window.Workbox#getSW}) and resolves\n     * with a response (if any).\n     *\n     * A response can be set in a message handler in the service worker by\n     * calling `event.ports[0].postMessage(...)`, which will resolve the promise\n     * returned by `messageSW()`. If no response is set, the promise will never\n     * resolve.\n     *\n     * @param {Object} data An object to send to the service worker\n     * @return {Promise<Object>}\n     */\n    async messageSW(data) {\n        const sw = await this.getSW();\n        return messageSW(sw, data);\n    }\n    /**\n     * Checks for a service worker already controlling the page and returns\n     * it if its script URL matches.\n     *\n     * @private\n     * @return {ServiceWorker|undefined}\n     */\n    _getControllingSWIfCompatible() {\n        const controller = navigator.serviceWorker.controller;\n        if (controller && urlsMatch(controller.scriptURL, this._scriptURL)) {\n            return controller;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Registers a service worker for this instances script URL and register\n     * options and tracks the time registration was complete.\n     *\n     * @private\n     */\n    async _registerScript() {\n        try {\n            const reg = await navigator.serviceWorker.register(this._scriptURL, this._registerOptions);\n            // Keep track of when registration happened, so it can be used in the\n            // `this._onUpdateFound` heuristic. Also use the presence of this\n            // property as a way to see if `.register()` has been called.\n            this._registrationTime = performance.now();\n            return reg;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(error);\n            }\n            // Re-throw the error.\n            throw error;\n        }\n    }\n}\nexport { Workbox };\n// The jsdoc comments below outline the events this instance may dispatch:\n// -----------------------------------------------------------------------\n/**\n * The `message` event is dispatched any time a `postMessage` is received.\n *\n * @event module:workbox-window.Workbox#message\n * @type {WorkboxEvent}\n * @property {*} data The `data` property from the original `message` event.\n * @property {Event} originalEvent The original [`message`]{@link https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent}\n *     event.\n * @property {string} type `message`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `installed` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `installed`.\n *\n * Then can happen either the very first time a service worker is installed,\n * or after an update to the current service worker is found. In the case\n * of an update being found, the event's `isUpdate` property will be `true`.\n *\n * @event module:workbox-window.Workbox#installed\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `installed`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `waiting` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `installed` and then doesn't immediately change to `activating`.\n * It may also be dispatched if a service worker with the same\n * [`scriptURL`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL}\n * was already waiting when the [`register()`]{@link module:workbox-window.Workbox#register}\n * method was called.\n *\n * @event module:workbox-window.Workbox#waiting\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event|undefined} originalEvent The original\n *    [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event, or `undefined` in the case where the service worker was waiting\n *     to before `.register()` was called.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {boolean|undefined} wasWaitingBeforeRegister True if a service worker with\n *     a matching `scriptURL` was already waiting when this `Workbox`\n *     instance called `register()`.\n * @property {string} type `waiting`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `controlling` event is dispatched if a\n * [`controllerchange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange}\n * fires on the service worker [container]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer}\n * and the [`scriptURL`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL}\n * of the new [controller]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller}\n * matches the `scriptURL` of the `Workbox` instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}.\n *\n * @event module:workbox-window.Workbox#controlling\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`controllerchange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this service worker was registered.\n * @property {string} type `controlling`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `activated` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `activated`.\n *\n * @event module:workbox-window.Workbox#activated\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `activated`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `redundant` event is dispatched if the state of a\n * [`Workbox`]{@link module:workbox-window.Workbox} instance's\n * [registered service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-precaching#def-registered-sw}\n * changes to `redundant`.\n *\n * @event module:workbox-window.Workbox#redundant\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {boolean|undefined} isUpdate True if a service worker was already\n *     controlling when this `Workbox` instance called `register()`.\n * @property {string} type `redundant`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `externalinstalled` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-window#when_an_unexpected_version_of_the_service_worker_is_found}\n * changes to `installed`.\n *\n * @event module:workbox-window.Workbox#externalinstalled\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalinstalled`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `externalwaiting` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-window#when_an_unexpected_version_of_the_service_worker_is_found}\n * changes to `waiting`.\n *\n * @event module:workbox-window.Workbox#externalwaiting\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalwaiting`.\n * @property {Workbox} target The `Workbox` instance.\n */\n/**\n * The `externalactivated` event is dispatched if the state of an\n * [external service worker]{@link https://developers.google.com/web/tools/workbox/modules/workbox-window#when_an_unexpected_version_of_the_service_worker_is_found}\n * changes to `activated`.\n *\n * @event module:workbox-window.Workbox#externalactivated\n * @type {WorkboxEvent}\n * @property {ServiceWorker} sw The service worker instance.\n * @property {Event} originalEvent The original [`statechange`]{@link https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange}\n *     event.\n * @property {string} type `externalactivated`.\n * @property {Workbox} target The `Workbox` instance.\n */\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n/**\n * A minimal `EventTarget` shim.\n * This is necessary because not all browsers support constructable\n * `EventTarget`, so using a real `EventTarget` will error.\n * @private\n */\nexport class WorkboxEventTarget {\n    constructor() {\n        this._eventListenerRegistry = new Map();\n    }\n    /**\n     * @param {string} type\n     * @param {Function} listener\n     * @private\n     */\n    addEventListener(type, listener) {\n        const foo = this._getEventListenersByType(type);\n        foo.add(listener);\n    }\n    /**\n     * @param {string} type\n     * @param {Function} listener\n     * @private\n     */\n    removeEventListener(type, listener) {\n        this._getEventListenersByType(type).delete(listener);\n    }\n    /**\n     * @param {Object} event\n     * @private\n     */\n    dispatchEvent(event) {\n        event.target = this;\n        const listeners = this._getEventListenersByType(event.type);\n        for (const listener of listeners) {\n            listener(event);\n        }\n    }\n    /**\n     * Returns a Set of listeners associated with the passed event type.\n     * If no handlers have been registered, an empty Set is returned.\n     *\n     * @param {string} type The event type.\n     * @return {Set<ListenerCallback>} An array of handler functions.\n     * @private\n     */\n    _getEventListenersByType(type) {\n        if (!this._eventListenerRegistry.has(type)) {\n            this._eventListenerRegistry.set(type, new Set());\n        }\n        return this._eventListenerRegistry.get(type);\n    }\n}\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    promise.then(() => { });\n}\n"]},"metadata":{},"sourceType":"module"}