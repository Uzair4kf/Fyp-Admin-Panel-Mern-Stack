{"ast":null,"code":"\"use strict\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\n\nconst joi = require('@hapi/joi');\n\nconst upath = require('upath');\n\nconst basePartial = require('../partials/base');\n\nconst defaults = require('../defaults');\n\nconst injectPartial = require('../partials/inject');\n\nconst webpackPartial = require('../partials/webpack'); // See https://github.com/hapijs/joi/blob/v16.0.0-rc2/API.md#anydefaultvalue-description\n\n\nconst swSrcBasename = context => {\n  const {\n    name\n  } = upath.parse(context.swSrc); // Always use the .js extension when generating a default filename.\n\n  return name + '.js';\n};\n\nswSrcBasename.description = 'derived from the swSrc file name';\nconst supportedOptions = Object.assign({\n  compileSrc: joi.boolean().default(defaults.compileSrc),\n  webpackCompilationPlugins: joi.array().items(joi.object()).when('compileSrc', {\n    is: false,\n    then: joi.forbidden()\n  })\n}, basePartial, injectPartial, webpackPartial);\nmodule.exports = joi.object().keys(supportedOptions).keys({\n  // List this separately, so that the swSrc validation happens first.\n  swDest: joi.string().default(swSrcBasename)\n});","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-build/build/options/schema/webpack-inject-manifest.js"],"names":["joi","require","upath","basePartial","defaults","injectPartial","webpackPartial","swSrcBasename","context","name","parse","swSrc","description","supportedOptions","Object","assign","compileSrc","boolean","default","webpackCompilationPlugins","array","items","object","when","is","then","forbidden","module","exports","keys","swDest","string"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AAEA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAME,WAAW,GAAGF,OAAO,CAAC,kBAAD,CAA3B;;AAEA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,aAAD,CAAxB;;AAEA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,oBAAD,CAA7B;;AAEA,MAAMK,cAAc,GAAGL,OAAO,CAAC,qBAAD,CAA9B,C,CAAuD;;;AAGvD,MAAMM,aAAa,GAAGC,OAAO,IAAI;AAC/B,QAAM;AACJC,IAAAA;AADI,MAEFP,KAAK,CAACQ,KAAN,CAAYF,OAAO,CAACG,KAApB,CAFJ,CAD+B,CAGC;;AAEhC,SAAOF,IAAI,GAAG,KAAd;AACD,CAND;;AAQAF,aAAa,CAACK,WAAd,GAA4B,kCAA5B;AACA,MAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc;AACrCC,EAAAA,UAAU,EAAEhB,GAAG,CAACiB,OAAJ,GAAcC,OAAd,CAAsBd,QAAQ,CAACY,UAA/B,CADyB;AAErCG,EAAAA,yBAAyB,EAAEnB,GAAG,CAACoB,KAAJ,GAAYC,KAAZ,CAAkBrB,GAAG,CAACsB,MAAJ,EAAlB,EAAgCC,IAAhC,CAAqC,YAArC,EAAmD;AAC5EC,IAAAA,EAAE,EAAE,KADwE;AAE5EC,IAAAA,IAAI,EAAEzB,GAAG,CAAC0B,SAAJ;AAFsE,GAAnD;AAFU,CAAd,EAMtBvB,WANsB,EAMTE,aANS,EAMMC,cANN,CAAzB;AAOAqB,MAAM,CAACC,OAAP,GAAiB5B,GAAG,CAACsB,MAAJ,GAAaO,IAAb,CAAkBhB,gBAAlB,EAAoCgB,IAApC,CAAyC;AACxD;AACAC,EAAAA,MAAM,EAAE9B,GAAG,CAAC+B,MAAJ,GAAab,OAAb,CAAqBX,aAArB;AAFgD,CAAzC,CAAjB","sourcesContent":["\"use strict\";\n\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nconst joi = require('@hapi/joi');\n\nconst upath = require('upath');\n\nconst basePartial = require('../partials/base');\n\nconst defaults = require('../defaults');\n\nconst injectPartial = require('../partials/inject');\n\nconst webpackPartial = require('../partials/webpack'); // See https://github.com/hapijs/joi/blob/v16.0.0-rc2/API.md#anydefaultvalue-description\n\n\nconst swSrcBasename = context => {\n  const {\n    name\n  } = upath.parse(context.swSrc); // Always use the .js extension when generating a default filename.\n\n  return name + '.js';\n};\n\nswSrcBasename.description = 'derived from the swSrc file name';\nconst supportedOptions = Object.assign({\n  compileSrc: joi.boolean().default(defaults.compileSrc),\n  webpackCompilationPlugins: joi.array().items(joi.object()).when('compileSrc', {\n    is: false,\n    then: joi.forbidden()\n  })\n}, basePartial, injectPartial, webpackPartial);\nmodule.exports = joi.object().keys(supportedOptions).keys({\n  // List this separately, so that the swSrc validation happens first.\n  swDest: joi.string().default(swSrcBasename)\n});"]},"metadata":{},"sourceType":"script"}