{"ast":null,"code":"'use strict';\n/**\n * Class representing an event.\n *\n * @private\n */\n\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\n\n\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n    this.data = data;\n  }\n\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\n\n\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being\n   *     closed\n   * @param {String} reason A human-readable string explaining why the\n   *     connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\n\n\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n\n}\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\n\n\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n    this.message = error.message;\n    this.error = error;\n  }\n\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\n\n\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    const method = options && options.once ? 'once' : 'on';\n\n    if (type === 'message') {\n      onMessage._listener = listener;\n      this[method](type, onMessage);\n    } else if (type === 'close') {\n      onClose._listener = listener;\n      this[method](type, onClose);\n    } else if (type === 'error') {\n      onError._listener = listener;\n      this[method](type, onError);\n    } else if (type === 'open') {\n      onOpen._listener = listener;\n      this[method](type, onOpen);\n    } else {\n      this[method](type, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners(type);\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(type, listeners[i]);\n      }\n    }\n  }\n\n};\nmodule.exports = EventTarget;","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/ws/lib/event-target.js"],"names":["Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","ErrorEvent","error","message","EventTarget","addEventListener","listener","options","onMessage","call","onClose","onError","onOpen","method","once","_listener","removeEventListener","listeners","i","length","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being\n   *     closed\n   * @param {String} reason A human-readable string explaining why the\n   *     connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n}\n\n/**\n * Class representing an error event.\n *\n * @extends Event\n * @private\n */\nclass ErrorEvent extends Event {\n  /**\n   * Create a new `ErrorEvent`.\n   *\n   * @param {Object} error The error that generated this event\n   * @param {WebSocket} target A reference to the target to which the event was\n   *     dispatched\n   */\n  constructor(error, target) {\n    super('error', target);\n\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} type A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @param {Object} [options] An options object specifies characteristics about\n   *     the event listener\n   * @param {Boolean} [options.once=false] A `Boolean`` indicating that the\n   *     listener should be invoked at most once after being added. If `true`,\n   *     the listener would be automatically removed when invoked.\n   * @public\n   */\n  addEventListener(type, listener, options) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(error) {\n      listener.call(this, new ErrorEvent(error, this));\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    const method = options && options.once ? 'once' : 'on';\n\n    if (type === 'message') {\n      onMessage._listener = listener;\n      this[method](type, onMessage);\n    } else if (type === 'close') {\n      onClose._listener = listener;\n      this[method](type, onClose);\n    } else if (type === 'error') {\n      onError._listener = listener;\n      this[method](type, onError);\n    } else if (type === 'open') {\n      onOpen._listener = listener;\n      this[method](type, onOpen);\n    } else {\n      this[method](type, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} type A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners(type);\n\n    for (let i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(type, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n"]},"metadata":{},"sourceType":"script"}