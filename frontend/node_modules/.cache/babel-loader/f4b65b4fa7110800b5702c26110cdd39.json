{"ast":null,"code":"var sys = require(\"util\"),\n    assert = require(\"assert\"),\n    XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest,\n    xhr = new XMLHttpRequest(); // Test request methods that aren't allowed\n\n\ntry {\n  xhr.open(\"TRACK\", \"http://localhost:8000/\");\n  console.log(\"ERROR: TRACK should have thrown exception\");\n} catch (e) {}\n\ntry {\n  xhr.open(\"TRACE\", \"http://localhost:8000/\");\n  console.log(\"ERROR: TRACE should have thrown exception\");\n} catch (e) {}\n\ntry {\n  xhr.open(\"CONNECT\", \"http://localhost:8000/\");\n  console.log(\"ERROR: CONNECT should have thrown exception\");\n} catch (e) {} // Test valid request method\n\n\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\");\n} catch (e) {\n  console.log(\"ERROR: Invalid exception for GET\", e);\n} // Test forbidden headers\n\n\nvar forbiddenRequestHeaders = [\"accept-charset\", \"accept-encoding\", \"access-control-request-headers\", \"access-control-request-method\", \"connection\", \"content-length\", \"content-transfer-encoding\", \"cookie\", \"cookie2\", \"date\", \"expect\", \"host\", \"keep-alive\", \"origin\", \"referer\", \"te\", \"trailer\", \"transfer-encoding\", \"upgrade\", \"via\"];\n\nfor (var i in forbiddenRequestHeaders) {\n  if (xhr.setRequestHeader(forbiddenRequestHeaders[i], \"Test\") !== false) {\n    console.log(\"ERROR: \" + forbiddenRequestHeaders[i] + \" should have thrown exception\");\n  }\n} // Try valid header\n\n\nxhr.setRequestHeader(\"X-Foobar\", \"Test\");\nconsole.log(\"Done\");","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/xmlhttprequest-ssl/tests/test-exceptions.js"],"names":["sys","require","assert","XMLHttpRequest","xhr","open","console","log","e","forbiddenRequestHeaders","i","setRequestHeader"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAjB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,QAAD,CADpB;AAAA,IAEIE,cAAc,GAAGF,OAAO,CAAC,uBAAD,CAAP,CAAiCE,cAFtD;AAAA,IAGIC,GAAG,GAAG,IAAID,cAAJ,EAHV,C,CAKA;;;AACA,IAAI;AACFC,EAAAA,GAAG,CAACC,IAAJ,CAAS,OAAT,EAAkB,wBAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD,CAHD,CAGE,OAAMC,CAAN,EAAS,CAAE;;AACb,IAAI;AACFJ,EAAAA,GAAG,CAACC,IAAJ,CAAS,OAAT,EAAkB,wBAAlB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD,CAHD,CAGE,OAAMC,CAAN,EAAS,CAAE;;AACb,IAAI;AACFJ,EAAAA,GAAG,CAACC,IAAJ,CAAS,SAAT,EAAoB,wBAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD,CAHD,CAGE,OAAMC,CAAN,EAAS,CAAE,C,CACb;;;AACA,IAAI;AACFJ,EAAAA,GAAG,CAACC,IAAJ,CAAS,KAAT,EAAgB,wBAAhB;AACD,CAFD,CAEE,OAAMG,CAAN,EAAS;AACTF,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDC,CAAhD;AACD,C,CAED;;;AACA,IAAIC,uBAAuB,GAAG,CAC5B,gBAD4B,EAE5B,iBAF4B,EAG5B,gCAH4B,EAI5B,+BAJ4B,EAK5B,YAL4B,EAM5B,gBAN4B,EAO5B,2BAP4B,EAQ5B,QAR4B,EAS5B,SAT4B,EAU5B,MAV4B,EAW5B,QAX4B,EAY5B,MAZ4B,EAa5B,YAb4B,EAc5B,QAd4B,EAe5B,SAf4B,EAgB5B,IAhB4B,EAiB5B,SAjB4B,EAkB5B,mBAlB4B,EAmB5B,SAnB4B,EAoB5B,KApB4B,CAA9B;;AAuBA,KAAK,IAAIC,CAAT,IAAcD,uBAAd,EAAuC;AACrC,MAAGL,GAAG,CAACO,gBAAJ,CAAqBF,uBAAuB,CAACC,CAAD,CAA5C,EAAiD,MAAjD,MAA6D,KAAhE,EAAuE;AACrEJ,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYE,uBAAuB,CAACC,CAAD,CAAnC,GAAyC,+BAArD;AACD;AACF,C,CAED;;;AACAN,GAAG,CAACO,gBAAJ,CAAqB,UAArB,EAAiC,MAAjC;AAEAL,OAAO,CAACC,GAAR,CAAY,MAAZ","sourcesContent":["var sys = require(\"util\")\n  , assert = require(\"assert\")\n  , XMLHttpRequest = require(\"../lib/XMLHttpRequest\").XMLHttpRequest\n  , xhr = new XMLHttpRequest();\n\n// Test request methods that aren't allowed\ntry {\n  xhr.open(\"TRACK\", \"http://localhost:8000/\");\n  console.log(\"ERROR: TRACK should have thrown exception\");\n} catch(e) {}\ntry {\n  xhr.open(\"TRACE\", \"http://localhost:8000/\");\n  console.log(\"ERROR: TRACE should have thrown exception\");\n} catch(e) {}\ntry {\n  xhr.open(\"CONNECT\", \"http://localhost:8000/\");\n  console.log(\"ERROR: CONNECT should have thrown exception\");\n} catch(e) {}\n// Test valid request method\ntry {\n  xhr.open(\"GET\", \"http://localhost:8000/\");\n} catch(e) {\n  console.log(\"ERROR: Invalid exception for GET\", e);\n}\n\n// Test forbidden headers\nvar forbiddenRequestHeaders = [\n  \"accept-charset\",\n  \"accept-encoding\",\n  \"access-control-request-headers\",\n  \"access-control-request-method\",\n  \"connection\",\n  \"content-length\",\n  \"content-transfer-encoding\",\n  \"cookie\",\n  \"cookie2\",\n  \"date\",\n  \"expect\",\n  \"host\",\n  \"keep-alive\",\n  \"origin\",\n  \"referer\",\n  \"te\",\n  \"trailer\",\n  \"transfer-encoding\",\n  \"upgrade\",\n  \"via\"\n];\n\nfor (var i in forbiddenRequestHeaders) {\n  if(xhr.setRequestHeader(forbiddenRequestHeaders[i], \"Test\") !== false) {\n    console.log(\"ERROR: \" + forbiddenRequestHeaders[i] + \" should have thrown exception\");\n  }\n}\n\n// Try valid header\nxhr.setRequestHeader(\"X-Foobar\", \"Test\");\n\nconsole.log(\"Done\");\n"]},"metadata":{},"sourceType":"script"}