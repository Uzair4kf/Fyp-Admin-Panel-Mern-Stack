{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { calculateEffectiveBoundaries } from './utils/calculateEffectiveBoundaries.js';\nimport { parseRangeHeader } from './utils/parseRangeHeader.js';\nimport './_version.js';\n/**\n * Given a `Request` and `Response` objects as input, this will return a\n * promise for a new `Response`.\n *\n * If the original `Response` already contains partial content (i.e. it has\n * a status of 206), then this assumes it already fulfills the `Range:`\n * requirements, and will return it as-is.\n *\n * @param {Request} request A request, which should contain a Range:\n * header.\n * @param {Response} originalResponse A response.\n * @return {Promise<Response>} Either a `206 Partial Content` response, with\n * the response body set to the slice of content specified by the request's\n * `Range:` header, or a `416 Range Not Satisfiable` response if the\n * conditions of the `Range:` header can't be met.\n *\n * @memberof module:workbox-range-requests\n */\n\nasync function createPartialResponse(request, originalResponse) {\n  try {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(request, Request, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'createPartialResponse',\n        paramName: 'request'\n      });\n      assert.isInstance(originalResponse, Response, {\n        moduleName: 'workbox-range-requests',\n        funcName: 'createPartialResponse',\n        paramName: 'originalResponse'\n      });\n    }\n\n    if (originalResponse.status === 206) {\n      // If we already have a 206, then just pass it through as-is;\n      // see https://github.com/GoogleChrome/workbox/issues/1720\n      return originalResponse;\n    }\n\n    const rangeHeader = request.headers.get('range');\n\n    if (!rangeHeader) {\n      throw new WorkboxError('no-range-header');\n    }\n\n    const boundaries = parseRangeHeader(rangeHeader);\n    const originalBlob = await originalResponse.blob();\n    const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n    const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n    const slicedBlobSize = slicedBlob.size;\n    const slicedResponse = new Response(slicedBlob, {\n      // Status code 206 is for a Partial Content response.\n      // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n      status: 206,\n      statusText: 'Partial Content',\n      headers: originalResponse.headers\n    });\n    slicedResponse.headers.set('Content-Length', String(slicedBlobSize));\n    slicedResponse.headers.set('Content-Range', `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` + originalBlob.size);\n    return slicedResponse;\n  } catch (error) {\n    if (process.env.NODE_ENV !== 'production') {\n      logger.warn(`Unable to construct a partial response; returning a ` + `416 Range Not Satisfiable response instead.`);\n      logger.groupCollapsed(`View details here.`);\n      logger.log(error);\n      logger.log(request);\n      logger.log(originalResponse);\n      logger.groupEnd();\n    }\n\n    return new Response('', {\n      status: 416,\n      statusText: 'Range Not Satisfiable'\n    });\n  }\n}\n\nexport { createPartialResponse };","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-range-requests/createPartialResponse.js"],"names":["WorkboxError","assert","logger","calculateEffectiveBoundaries","parseRangeHeader","createPartialResponse","request","originalResponse","process","env","NODE_ENV","isInstance","Request","moduleName","funcName","paramName","Response","status","rangeHeader","headers","get","boundaries","originalBlob","blob","effectiveBoundaries","start","end","slicedBlob","slice","slicedBlobSize","size","slicedResponse","statusText","set","String","error","warn","groupCollapsed","log","groupEnd"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { calculateEffectiveBoundaries } from './utils/calculateEffectiveBoundaries.js';\nimport { parseRangeHeader } from './utils/parseRangeHeader.js';\nimport './_version.js';\n/**\n * Given a `Request` and `Response` objects as input, this will return a\n * promise for a new `Response`.\n *\n * If the original `Response` already contains partial content (i.e. it has\n * a status of 206), then this assumes it already fulfills the `Range:`\n * requirements, and will return it as-is.\n *\n * @param {Request} request A request, which should contain a Range:\n * header.\n * @param {Response} originalResponse A response.\n * @return {Promise<Response>} Either a `206 Partial Content` response, with\n * the response body set to the slice of content specified by the request's\n * `Range:` header, or a `416 Range Not Satisfiable` response if the\n * conditions of the `Range:` header can't be met.\n *\n * @memberof module:workbox-range-requests\n */\nasync function createPartialResponse(request, originalResponse) {\n    try {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-range-requests',\n                funcName: 'createPartialResponse',\n                paramName: 'request',\n            });\n            assert.isInstance(originalResponse, Response, {\n                moduleName: 'workbox-range-requests',\n                funcName: 'createPartialResponse',\n                paramName: 'originalResponse',\n            });\n        }\n        if (originalResponse.status === 206) {\n            // If we already have a 206, then just pass it through as-is;\n            // see https://github.com/GoogleChrome/workbox/issues/1720\n            return originalResponse;\n        }\n        const rangeHeader = request.headers.get('range');\n        if (!rangeHeader) {\n            throw new WorkboxError('no-range-header');\n        }\n        const boundaries = parseRangeHeader(rangeHeader);\n        const originalBlob = await originalResponse.blob();\n        const effectiveBoundaries = calculateEffectiveBoundaries(originalBlob, boundaries.start, boundaries.end);\n        const slicedBlob = originalBlob.slice(effectiveBoundaries.start, effectiveBoundaries.end);\n        const slicedBlobSize = slicedBlob.size;\n        const slicedResponse = new Response(slicedBlob, {\n            // Status code 206 is for a Partial Content response.\n            // See https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/206\n            status: 206,\n            statusText: 'Partial Content',\n            headers: originalResponse.headers,\n        });\n        slicedResponse.headers.set('Content-Length', String(slicedBlobSize));\n        slicedResponse.headers.set('Content-Range', `bytes ${effectiveBoundaries.start}-${effectiveBoundaries.end - 1}/` +\n            originalBlob.size);\n        return slicedResponse;\n    }\n    catch (error) {\n        if (process.env.NODE_ENV !== 'production') {\n            logger.warn(`Unable to construct a partial response; returning a ` +\n                `416 Range Not Satisfiable response instead.`);\n            logger.groupCollapsed(`View details here.`);\n            logger.log(error);\n            logger.log(request);\n            logger.log(originalResponse);\n            logger.groupEnd();\n        }\n        return new Response('', {\n            status: 416,\n            statusText: 'Range Not Satisfiable',\n        });\n    }\n}\nexport { createPartialResponse };\n"]},"metadata":{},"sourceType":"module"}