{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {string} rangeHeader A Range: header value.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the parsed value of the Range: header. If either the `start` or `end` are\n * omitted, then `null` will be returned.\n *\n * @private\n */\n\nfunction parseRangeHeader(rangeHeader) {\n  if (process.env.NODE_ENV !== 'production') {\n    assert.isType(rangeHeader, 'string', {\n      moduleName: 'workbox-range-requests',\n      funcName: 'parseRangeHeader',\n      paramName: 'rangeHeader'\n    });\n  }\n\n  const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n\n  if (!normalizedRangeHeader.startsWith('bytes=')) {\n    throw new WorkboxError('unit-must-be-bytes', {\n      normalizedRangeHeader\n    });\n  } // Specifying multiple ranges separate by commas is valid syntax, but this\n  // library only attempts to handle a single, contiguous sequence of bytes.\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n\n\n  if (normalizedRangeHeader.includes(',')) {\n    throw new WorkboxError('single-range-only', {\n      normalizedRangeHeader\n    });\n  }\n\n  const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader); // We need either at least one of the start or end values.\n\n  if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n    throw new WorkboxError('invalid-range-values', {\n      normalizedRangeHeader\n    });\n  }\n\n  return {\n    start: rangeParts[1] === '' ? undefined : Number(rangeParts[1]),\n    end: rangeParts[2] === '' ? undefined : Number(rangeParts[2])\n  };\n}\n\nexport { parseRangeHeader };","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/workbox-range-requests/utils/parseRangeHeader.js"],"names":["WorkboxError","assert","parseRangeHeader","rangeHeader","process","env","NODE_ENV","isType","moduleName","funcName","paramName","normalizedRangeHeader","trim","toLowerCase","startsWith","includes","rangeParts","exec","start","undefined","Number","end"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,uCAA7B;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACnC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACvCL,IAAAA,MAAM,CAACM,MAAP,CAAcJ,WAAd,EAA2B,QAA3B,EAAqC;AACjCK,MAAAA,UAAU,EAAE,wBADqB;AAEjCC,MAAAA,QAAQ,EAAE,kBAFuB;AAGjCC,MAAAA,SAAS,EAAE;AAHsB,KAArC;AAKH;;AACD,QAAMC,qBAAqB,GAAGR,WAAW,CAACS,IAAZ,GAAmBC,WAAnB,EAA9B;;AACA,MAAI,CAACF,qBAAqB,CAACG,UAAtB,CAAiC,QAAjC,CAAL,EAAiD;AAC7C,UAAM,IAAId,YAAJ,CAAiB,oBAAjB,EAAuC;AAAEW,MAAAA;AAAF,KAAvC,CAAN;AACH,GAXkC,CAYnC;AACA;AACA;;;AACA,MAAIA,qBAAqB,CAACI,QAAtB,CAA+B,GAA/B,CAAJ,EAAyC;AACrC,UAAM,IAAIf,YAAJ,CAAiB,mBAAjB,EAAsC;AAAEW,MAAAA;AAAF,KAAtC,CAAN;AACH;;AACD,QAAMK,UAAU,GAAG,cAAcC,IAAd,CAAmBN,qBAAnB,CAAnB,CAlBmC,CAmBnC;;AACA,MAAI,CAACK,UAAD,IAAe,EAAEA,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAA7B,CAAnB,EAAsD;AAClD,UAAM,IAAIhB,YAAJ,CAAiB,sBAAjB,EAAyC;AAAEW,MAAAA;AAAF,KAAzC,CAAN;AACH;;AACD,SAAO;AACHO,IAAAA,KAAK,EAAEF,UAAU,CAAC,CAAD,CAAV,KAAkB,EAAlB,GAAuBG,SAAvB,GAAmCC,MAAM,CAACJ,UAAU,CAAC,CAAD,CAAX,CAD7C;AAEHK,IAAAA,GAAG,EAAEL,UAAU,CAAC,CAAD,CAAV,KAAkB,EAAlB,GAAuBG,SAAvB,GAAmCC,MAAM,CAACJ,UAAU,CAAC,CAAD,CAAX;AAF3C,GAAP;AAIH;;AACD,SAASd,gBAAT","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {string} rangeHeader A Range: header value.\n * @return {Object} An object with `start` and `end` properties, reflecting\n * the parsed value of the Range: header. If either the `start` or `end` are\n * omitted, then `null` will be returned.\n *\n * @private\n */\nfunction parseRangeHeader(rangeHeader) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(rangeHeader, 'string', {\n            moduleName: 'workbox-range-requests',\n            funcName: 'parseRangeHeader',\n            paramName: 'rangeHeader',\n        });\n    }\n    const normalizedRangeHeader = rangeHeader.trim().toLowerCase();\n    if (!normalizedRangeHeader.startsWith('bytes=')) {\n        throw new WorkboxError('unit-must-be-bytes', { normalizedRangeHeader });\n    }\n    // Specifying multiple ranges separate by commas is valid syntax, but this\n    // library only attempts to handle a single, contiguous sequence of bytes.\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range#Syntax\n    if (normalizedRangeHeader.includes(',')) {\n        throw new WorkboxError('single-range-only', { normalizedRangeHeader });\n    }\n    const rangeParts = /(\\d*)-(\\d*)/.exec(normalizedRangeHeader);\n    // We need either at least one of the start or end values.\n    if (!rangeParts || !(rangeParts[1] || rangeParts[2])) {\n        throw new WorkboxError('invalid-range-values', { normalizedRangeHeader });\n    }\n    return {\n        start: rangeParts[1] === '' ? undefined : Number(rangeParts[1]),\n        end: rangeParts[2] === '' ? undefined : Number(rangeParts[2]),\n    };\n}\nexport { parseRangeHeader };\n"]},"metadata":{},"sourceType":"module"}