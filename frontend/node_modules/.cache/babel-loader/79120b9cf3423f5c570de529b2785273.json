{"ast":null,"code":"/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n'use strict';\n\nconst EventEmitter = require('events');\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst net = require('net');\n\nconst tls = require('tls');\n\nconst {\n  createHash\n} = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\n\nconst WebSocket = require('./websocket');\n\nconst {\n  format,\n  parse\n} = require('./extension');\n\nconst {\n  GUID,\n  kWebSocket\n} = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\n\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null,\n      // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n      throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + 'must be specified');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n    this._state = RUNNING;\n  }\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n\n\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n  /**\n   * Close the server.\n   *\n   * @param {Function} [cb] Callback\n   * @public\n   */\n\n\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSED) {\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING; //\n    // Terminate all associated clients.\n    //\n\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n\n      this._removeListeners = this._server = null; //\n      // Close the http server if it was internally created.\n      //\n\n      if (this.options.port != null) {\n        server.close(emitClose.bind(undefined, this));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n\n\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n\n\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n    const key = req.headers['sec-websocket-key'] !== undefined ? req.headers['sec-websocket-key'].trim() : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n\n      try {\n        const offers = parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    } //\n    // Optionally call external client verification handler.\n    //\n\n\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n\n\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error('server.handleUpgrade() was called more than once with the same ' + 'socket, possibly due to a misconfiguration');\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n    const digest = createHash('sha1').update(key + GUID).digest('base64');\n    const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${digest}`];\n    const ws = new WebSocket(null);\n    let protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.split(',').map(trim); //\n      // Optionally call external protocol selection handler.\n      //\n\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    } //\n    // Allow external modification/inspection of handshake headers.\n    //\n\n\n    this.emit('headers', headers, req);\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws, req);\n  }\n\n}\n\nmodule.exports = WebSocketServer;\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\n\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\n\n\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n/**\n * Handle premature socket errors.\n *\n * @private\n */\n\n\nfunction socketOnError() {\n  this.destroy();\n}\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\n\n\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n    socket.write(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\\r\\n') + '\\r\\n\\r\\n' + message);\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n/**\n * Remove whitespace characters from both ends of a string.\n *\n * @param {String} str The string\n * @return {String} A new string representing `str` stripped of whitespace\n *     characters from both its beginning and end\n * @private\n */\n\n\nfunction trim(str) {\n  return str.trim();\n}","map":{"version":3,"sources":["/Users/limia/Desktop/Dummy Admin Temp/package/frontend/node_modules/ws/lib/websocket-server.js"],"names":["EventEmitter","require","http","https","net","tls","createHash","PerMessageDeflate","WebSocket","format","parse","GUID","kWebSocket","keyRegex","RUNNING","CLOSING","CLOSED","WebSocketServer","constructor","options","callback","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","createServer","req","res","body","STATUS_CODES","writeHead","length","end","listen","emitConnection","emit","bind","_removeListeners","addListeners","listening","error","upgrade","socket","head","handleUpgrade","clients","Set","_state","address","Error","close","cb","once","process","nextTick","emitClose","client","terminate","undefined","shouldHandle","index","url","indexOf","pathname","slice","on","socketOnError","key","headers","trim","version","extensions","method","toLowerCase","test","abortHandshake","offers","extensionName","accept","err","info","origin","secure","authorized","encrypted","verified","code","message","completeUpgrade","readable","writable","destroy","digest","update","ws","protocol","split","map","push","_protocol","params","value","_extensions","write","concat","join","removeListener","setSocket","add","delete","module","exports","event","Object","keys","removeListeners","Connection","Buffer","byteLength","h","str"],"mappings":"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","sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^net|tls|https$\" }] */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst http = require('http');\nconst https = require('https');\nconst net = require('net');\nconst tls = require('tls');\nconst { createHash } = require('crypto');\n\nconst PerMessageDeflate = require('./permessage-deflate');\nconst WebSocket = require('./websocket');\nconst { format, parse } = require('./extension');\nconst { GUID, kWebSocket } = require('./constants');\n\nconst keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n\nconst RUNNING = 0;\nconst CLOSING = 1;\nconst CLOSED = 2;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {Number} [options.backlog=511] The maximum length of the queue of\n   *     pending connections\n   * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n   *     track clients\n   * @param {Function} [options.handleProtocols] A hook to handle protocols\n   * @param {String} [options.host] The hostname where to bind the server\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Boolean} [options.noServer=false] Enable no server mode\n   * @param {String} [options.path] Accept only connections matching this path\n   * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.port] The port where to bind the server\n   * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n   *     server to use\n   * @param {Function} [options.verifyClient] A hook to reject connections\n   * @param {Function} [callback] A listener for the `listening` event\n   */\n  constructor(options, callback) {\n    super();\n\n    options = {\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null,\n      ...options\n    };\n\n    if (\n      (options.port == null && !options.server && !options.noServer) ||\n      (options.port != null && (options.server || options.noServer)) ||\n      (options.server && options.noServer)\n    ) {\n      throw new TypeError(\n        'One and only one of the \"port\", \"server\", or \"noServer\" options ' +\n          'must be specified'\n      );\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(\n        options.port,\n        options.host,\n        options.backlog,\n        callback\n      );\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      const emitConnection = this.emit.bind(this, 'connection');\n\n      this._removeListeners = addListeners(this._server, {\n        listening: this.emit.bind(this, 'listening'),\n        error: this.emit.bind(this, 'error'),\n        upgrade: (req, socket, head) => {\n          this.handleUpgrade(req, socket, head, emitConnection);\n        }\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n    this._state = RUNNING;\n  }\n\n  /**\n   * Returns the bound address, the address family name, and port of the server\n   * as reported by the operating system if listening on an IP socket.\n   * If the server is listening on a pipe or UNIX domain socket, the name is\n   * returned as a string.\n   *\n   * @return {(Object|String|null)} The address of the server\n   * @public\n   */\n  address() {\n    if (this.options.noServer) {\n      throw new Error('The server is operating in \"noServer\" mode');\n    }\n\n    if (!this._server) return null;\n    return this._server.address();\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} [cb] Callback\n   * @public\n   */\n  close(cb) {\n    if (cb) this.once('close', cb);\n\n    if (this._state === CLOSED) {\n      process.nextTick(emitClose, this);\n      return;\n    }\n\n    if (this._state === CLOSING) return;\n    this._state = CLOSING;\n\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._removeListeners();\n      this._removeListeners = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) {\n        server.close(emitClose.bind(undefined, this));\n        return;\n      }\n    }\n\n    process.nextTick(emitClose, this);\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle(req) {\n    if (this.options.path) {\n      const index = req.url.indexOf('?');\n      const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n\n      if (pathname !== this.options.path) return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade(req, socket, head, cb) {\n    socket.on('error', socketOnError);\n\n    const key =\n      req.headers['sec-websocket-key'] !== undefined\n        ? req.headers['sec-websocket-key'].trim()\n        : false;\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' ||\n      req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !key ||\n      !keyRegex.test(key) ||\n      (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortHandshake(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = parse(req.headers['sec-websocket-extensions']);\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortHandshake(socket, 400);\n      }\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin:\n          req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.socket.authorized || req.socket.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message, headers) => {\n          if (!verified) {\n            return abortHandshake(socket, code || 401, message, headers);\n          }\n\n          this.completeUpgrade(key, extensions, req, socket, head, cb);\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n    }\n\n    this.completeUpgrade(key, extensions, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} key The value of the `Sec-WebSocket-Key` header\n   * @param {Object} extensions The accepted extensions\n   * @param {http.IncomingMessage} req The request object\n   * @param {(net.Socket|tls.Socket)} socket The network socket between the\n   *     server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @throws {Error} If called more than once with the same socket\n   * @private\n   */\n  completeUpgrade(key, extensions, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    if (socket[kWebSocket]) {\n      throw new Error(\n        'server.handleUpgrade() was called more than once with the same ' +\n          'socket, possibly due to a misconfiguration'\n      );\n    }\n\n    if (this._state > RUNNING) return abortHandshake(socket, 503);\n\n    const digest = createHash('sha1')\n      .update(key + GUID)\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${digest}`\n    ];\n\n    const ws = new WebSocket(null);\n    let protocol = req.headers['sec-websocket-protocol'];\n\n    if (protocol) {\n      protocol = protocol.split(',').map(trim);\n\n      //\n      // Optionally call external protocol selection handler.\n      //\n      if (this.options.handleProtocols) {\n        protocol = this.options.handleProtocols(protocol, req);\n      } else {\n        protocol = protocol[0];\n      }\n\n      if (protocol) {\n        headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n        ws._protocol = protocol;\n      }\n    }\n\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n      ws._extensions = extensions;\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n    socket.removeListener('error', socketOnError);\n\n    ws.setSocket(socket, head, this.options.maxPayload);\n\n    if (this.clients) {\n      this.clients.add(ws);\n      ws.on('close', () => this.clients.delete(ws));\n    }\n\n    cb(ws, req);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Add event listeners on an `EventEmitter` using a map of <event, listener>\n * pairs.\n *\n * @param {EventEmitter} server The event emitter\n * @param {Object.<String, Function>} map The listeners to add\n * @return {Function} A function that will remove the added listeners when\n *     called\n * @private\n */\nfunction addListeners(server, map) {\n  for (const event of Object.keys(map)) server.on(event, map[event]);\n\n  return function removeListeners() {\n    for (const event of Object.keys(map)) {\n      server.removeListener(event, map[event]);\n    }\n  };\n}\n\n/**\n * Emit a `'close'` event on an `EventEmitter`.\n *\n * @param {EventEmitter} server The event emitter\n * @private\n */\nfunction emitClose(server) {\n  server._state = CLOSED;\n  server.emit('close');\n}\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketOnError() {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {(net.Socket|tls.Socket)} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @param {Object} [headers] Additional HTTP response headers\n * @private\n */\nfunction abortHandshake(socket, code, message, headers) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n        Object.keys(headers)\n          .map((h) => `${h}: ${headers[h]}`)\n          .join('\\r\\n') +\n        '\\r\\n\\r\\n' +\n        message\n    );\n  }\n\n  socket.removeListener('error', socketOnError);\n  socket.destroy();\n}\n\n/**\n * Remove whitespace characters from both ends of a string.\n *\n * @param {String} str The string\n * @return {String} A new string representing `str` stripped of whitespace\n *     characters from both its beginning and end\n * @private\n */\nfunction trim(str) {\n  return str.trim();\n}\n"]},"metadata":{},"sourceType":"script"}