{"ast":null,"code":"this.workbox = this.workbox || {}, this.workbox.routing = function (t, e) {\n  \"use strict\";\n\n  try {\n    self[\"workbox:routing:5.1.4\"] && _();\n  } catch (t) {}\n\n  const s = t => t && \"object\" == typeof t ? t : {\n    handle: t\n  };\n\n  class r {\n    constructor(t, e, r = \"GET\") {\n      this.handler = s(e), this.match = t, this.method = r;\n    }\n\n  }\n\n  class n extends r {\n    constructor(t, e, s) {\n      super(({\n        url: e\n      }) => {\n        const s = t.exec(e.href);\n        if (s && (e.origin === location.origin || 0 === s.index)) return s.slice(1);\n      }, e, s);\n    }\n\n  }\n\n  class o {\n    constructor() {\n      this.t = new Map();\n    }\n\n    get routes() {\n      return this.t;\n    }\n\n    addFetchListener() {\n      self.addEventListener(\"fetch\", t => {\n        const {\n          request: e\n        } = t,\n              s = this.handleRequest({\n          request: e,\n          event: t\n        });\n        s && t.respondWith(s);\n      });\n    }\n\n    addCacheListener() {\n      self.addEventListener(\"message\", t => {\n        if (t.data && \"CACHE_URLS\" === t.data.type) {\n          const {\n            payload: e\n          } = t.data,\n                s = Promise.all(e.urlsToCache.map(t => {\n            \"string\" == typeof t && (t = [t]);\n            const e = new Request(...t);\n            return this.handleRequest({\n              request: e\n            });\n          }));\n          t.waitUntil(s), t.ports && t.ports[0] && s.then(() => t.ports[0].postMessage(!0));\n        }\n      });\n    }\n\n    handleRequest({\n      request: t,\n      event: e\n    }) {\n      const s = new URL(t.url, location.href);\n      if (!s.protocol.startsWith(\"http\")) return;\n      const {\n        params: r,\n        route: n\n      } = this.findMatchingRoute({\n        url: s,\n        request: t,\n        event: e\n      });\n      let o,\n          i = n && n.handler;\n\n      if (!i && this.s && (i = this.s), i) {\n        try {\n          o = i.handle({\n            url: s,\n            request: t,\n            event: e,\n            params: r\n          });\n        } catch (t) {\n          o = Promise.reject(t);\n        }\n\n        return o instanceof Promise && this.o && (o = o.catch(r => this.o.handle({\n          url: s,\n          request: t,\n          event: e\n        }))), o;\n      }\n    }\n\n    findMatchingRoute({\n      url: t,\n      request: e,\n      event: s\n    }) {\n      const r = this.t.get(e.method) || [];\n\n      for (const n of r) {\n        let r;\n        const o = n.match({\n          url: t,\n          request: e,\n          event: s\n        });\n        if (o) return r = o, (Array.isArray(o) && 0 === o.length || o.constructor === Object && 0 === Object.keys(o).length || \"boolean\" == typeof o) && (r = void 0), {\n          route: n,\n          params: r\n        };\n      }\n\n      return {};\n    }\n\n    setDefaultHandler(t) {\n      this.s = s(t);\n    }\n\n    setCatchHandler(t) {\n      this.o = s(t);\n    }\n\n    registerRoute(t) {\n      this.t.has(t.method) || this.t.set(t.method, []), this.t.get(t.method).push(t);\n    }\n\n    unregisterRoute(t) {\n      if (!this.t.has(t.method)) throw new e.WorkboxError(\"unregister-route-but-not-found-with-method\", {\n        method: t.method\n      });\n      const s = this.t.get(t.method).indexOf(t);\n      if (!(s > -1)) throw new e.WorkboxError(\"unregister-route-route-not-registered\");\n      this.t.get(t.method).splice(s, 1);\n    }\n\n  }\n\n  let i;\n\n  const u = () => (i || (i = new o(), i.addFetchListener(), i.addCacheListener()), i);\n\n  return t.NavigationRoute = class extends r {\n    constructor(t, {\n      allowlist: e = [/./],\n      denylist: s = []\n    } = {}) {\n      super(t => this.i(t), t), this.u = e, this.h = s;\n    }\n\n    i({\n      url: t,\n      request: e\n    }) {\n      if (e && \"navigate\" !== e.mode) return !1;\n      const s = t.pathname + t.search;\n\n      for (const t of this.h) if (t.test(s)) return !1;\n\n      return !!this.u.some(t => t.test(s));\n    }\n\n  }, t.RegExpRoute = n, t.Route = r, t.Router = o, t.registerRoute = function (t, s, o) {\n    let i;\n\n    if (\"string\" == typeof t) {\n      const e = new URL(t, location.href);\n      i = new r(({\n        url: t\n      }) => t.href === e.href, s, o);\n    } else if (t instanceof RegExp) i = new n(t, s, o);else if (\"function\" == typeof t) i = new r(t, s, o);else {\n      if (!(t instanceof r)) throw new e.WorkboxError(\"unsupported-route-type\", {\n        moduleName: \"workbox-routing\",\n        funcName: \"registerRoute\",\n        paramName: \"capture\"\n      });\n      i = t;\n    }\n\n    return u().registerRoute(i), i;\n  }, t.setCatchHandler = function (t) {\n    u().setCatchHandler(t);\n  }, t.setDefaultHandler = function (t) {\n    u().setDefaultHandler(t);\n  }, t;\n}({}, workbox.core._private);","map":{"version":3,"sources":["../_version.js","../utils/constants.js","../utils/normalizeHandler.js","../Route.js","../RegExpRoute.js","../Router.js","../utils/getOrCreateDefaultRouter.js","../NavigationRoute.js","../registerRoute.js","../setCatchHandler.js","../setDefaultHandler.js"],"names":["self","_","e","normalizeHandler","handler","handle","Route","constructor","match","method","RegExpRoute","regExp","url","result","exec","href","origin","location","index","slice","Router","_routes","Map","this","addFetchListener","addEventListener","event","request","responsePromise","handleRequest","respondWith","addCacheListener","data","type","payload","requestPromises","Promise","all","urlsToCache","map","entry","Request","waitUntil","ports","then","postMessage","URL","protocol","startsWith","params","route","findMatchingRoute","_defaultHandler","err","reject","_catchHandler","catch","routes","get","matchResult","Array","isArray","length","undefined","Object","keys","setDefaultHandler","setCatchHandler","registerRoute","has","set","push","unregisterRoute","WorkboxError","routeIndex","indexOf","splice","defaultRouter","getOrCreateDefaultRouter","allowlist","denylist","options","_match","_allowlist","_denylist","mode","pathnameAndSearch","pathname","search","test","some","capture","captureUrl","RegExp","moduleName","funcName","paramName"],"mappings":";;;AAEA,MAAA;AACIA,IAAAA,IAAAA,CAAK,uBAALA,CAAAA,IAAiCC,CAAAA,EAAjCD;AAEJ,GAHA,CAGA,OAAOE,CAAP,EAAOA,CCWA;;AAAA,QCAMC,CAAAA,GAAoBC,CAAAA,IACzBA,CAAAA,IAA8B,YAAA,OAAZA,CAAlBA,GASOA,CATPA,GAoBO;AAAEC,IAAAA,MAAAA,EAAQD;AAAV,GDrBR;;AEIP,QAAME,CAAN,CAAMA;AAYFC,IAAAA,WAAAA,CAAYC,CAAZD,EAAmBH,CAAnBG,EAA4BE,CAAAA,GFhBH,KEgBzBF,EFhByB;AAAA,WE8BhBH,OF9BgB,GE8BND,CAAAA,CAAiBC,CAAjBD,CF9BM,EE8BWC,KAC3BI,KAD2BJ,GACnBI,CF/BQ,EE+BRA,KACRC,MADQD,GACCC,CFhCO;AEgCPA;;AA5BhBH;;ACIN,QAAMI,CAAN,SAA0BJ,CAA1B,CAA0BA;AActBC,IAAAA,WAAAA,CAAYI,CAAZJ,EAAoBH,CAApBG,EAA6BE,CAA7BF,EAA6BE;AAAAA,YASX,CAAA;AAAGG,QAAAA,GAAAA,EAAAA;AAAH,OAAA,KAAGA;AAAAA,cACPC,CAAAA,GAASF,CAAAA,CAAOG,IAAPH,CAAYC,CAAAA,CAAIG,IAAhBJ,CADFC;AACkBG,YAE1BF,CAAAA,KAOAD,CAAAA,CAAII,MAAJJ,KAAeK,QAAAA,CAASD,MAAxBJ,IAAqD,MAAjBC,CAAAA,CAAOK,KAP3CL,CAF0BE,EASiBG,OAYzCL,CAAAA,CAAOM,KAAPN,CAAa,CAAbA,CAZyCK;AAY5B,OA/BCT,EAiCZL,CAjCYK,EAiCHA,CAjCGA;AAiCHA;;AA/CJH;;ACM1B,QAAMc,CAAN,CAAMA;AAIFb,IAAAA,WAAAA,GAAAA;AAAAA,WACSc,CADTd,GACmB,IAAIe,GAAJ,EADnBf;AACuBe;;AAAAA,QAAAA,MAAAA,GAAAA;AAAAA,aAQZC,KAAKF,CAROC;AAcvBE;;AAAAA,IAAAA,gBAAAA,GAAAA;AAEIxB,MAAAA,IAAAA,CAAKyB,gBAALzB,CAAsB,OAAtBA,EAAiC0B,CAAAA,IAAAA;AAAAA,cAAAA;AACvBC,UAAAA,OAAAA,EAAEA;AADqBD,YACTA,CADSA;AAAAA,cAEvBE,CAAAA,GAAkBL,KAAKM,aAALN,CAAmB;AAAEI,UAAAA,OAAAA,EAAAA,CAAF;AAAWD,UAAAA,KAAAA,EAAAA;AAAX,SAAnBH,CAFKG;AAGzBE,QAAAA,CAAAA,IACAF,CAAAA,CAAMI,WAANJ,CAAkBE,CAAlBF,CADAE;AACkBA,OAJ1B5B;AA8BJ+B;;AAAAA,IAAAA,gBAAAA,GAAAA;AAEI/B,MAAAA,IAAAA,CAAKyB,gBAALzB,CAAsB,SAAtBA,EAAmC0B,CAAAA,IAAAA;AAAAA,YAC3BA,CAAAA,CAAMM,IAANN,IAAkC,iBAApBA,CAAAA,CAAMM,IAANN,CAAWO,IADEP,EACqB;AAAA,gBAAA;AAC1CQ,YAAAA,OAAAA,EAAEA;AADwC,cAC5BR,CAAAA,CAAMM,IADsB;AAAA,gBAK1CG,CAAAA,GAAkBC,OAAAA,CAAQC,GAARD,CAAYF,CAAAA,CAAQI,WAARJ,CAAoBK,GAApBL,CAAyBM,CAAAA,IAAAA;AACpC,wBAAA,OAAVA,CAAU,KACjBA,CAAAA,GAAQ,CAACA,CAAD,CADS;AACRA,kBAEPb,CAAAA,GAAU,IAAIc,OAAJ,CAAIA,GAAWD,CAAf,CAFHA;AAEkBA,mBACxBjB,KAAKM,aAALN,CAAmB;AAAEI,cAAAA,OAAAA,EAAAA;AAAF,aAAnBJ,CADwBiB;AACHb,WALIO,CAAZE,CALwB;AAehDV,UAAAA,CAAAA,CAAMgB,SAANhB,CAAgBS,CAAhBT,GAEIA,CAAAA,CAAMiB,KAANjB,IAAeA,CAAAA,CAAMiB,KAANjB,CAAY,CAAZA,CAAfA,IACAS,CAAAA,CAAgBS,IAAhBT,CAAqB,MAAMT,CAAAA,CAAMiB,KAANjB,CAAY,CAAZA,EAAemB,WAAfnB,CAAemB,CAAY,CAA3BnB,CAA3BS,CAHJT;AAG0D;AAAA,OAnBlE1B;AAqCJ6B;;AAAAA,IAAAA,aAAAA,CAAAA;AAAcF,MAAAA,OAAAA,EAAEA,CAAhBE;AAAcF,MAAAA,KAAAA,EAAWD;AAAzBG,KAAAA,EAAyBH;AAAAA,YASfd,CAAAA,GAAM,IAAIkC,GAAJ,CAAQnB,CAAAA,CAAQf,GAAhB,EAAqBK,QAAAA,CAASF,IAA9B,CATSW;AASqBX,UAAAA,CACrCH,CAAAA,CAAImC,QAAJnC,CAAaoC,UAAbpC,CAAwB,MAAxBA,CADqCG,EACb;AAAA,YAAA;AAMvBkC,QAAAA,MAAAA,EAAEA,CANqB;AAMvBA,QAAAA,KAAAA,EAAUC;AANa,UAMH3B,KAAK4B,iBAAL5B,CAAuB;AAAEX,QAAAA,GAAAA,EAAAA,CAAF;AAAOe,QAAAA,OAAAA,EAAAA,CAAP;AAAgBD,QAAAA,KAAAA,EAAAA;AAAhB,OAAvBH,CANG;AAMoCG,UAgD7DE,CAhD6DF;AAAAA,UAC7DtB,CAAAA,GAAU8C,CAAAA,IAASA,CAAAA,CAAM9C,OADoCsB;;AACpCtB,UAAAA,CAgBxBA,CAhBwBA,IAgBbmB,KAAK6B,CAhBQhD,KAqBzBA,CAAAA,GAAUmB,KAAK6B,CArBUhD,GAuBxBA,CAvBwBA,EAuBxBA;AAAAA,YAAAA;AA0BDwB,UAAAA,CAAAA,GAAkBxB,CAAAA,CAAQC,MAARD,CAAe;AAAEQ,YAAAA,GAAAA,EAAAA,CAAF;AAAOe,YAAAA,OAAAA,EAAAA,CAAP;AAAgBD,YAAAA,KAAAA,EAAAA,CAAhB;AAAuBuB,YAAAA,MAAAA,EAAAA;AAAvB,WAAf7C,CAAlBwB;AAEJ,SA5BKxB,CA4BL,OAAOiD,CAAP,EAAOA;AACHzB,UAAAA,CAAAA,GAAkBQ,OAAAA,CAAQkB,MAARlB,CAAeiB,CAAfjB,CAAlBR;AAAiCyB;;AAAAA,eAEjCzB,CAAAA,YAA2BQ,OAA3BR,IAAsCL,KAAKgC,CAA3C3B,KACAA,CAAAA,GAAkBA,CAAAA,CAAgB4B,KAAhB5B,CAAuByB,CAAAA,IAU9B9B,KAAKgC,CAALhC,CAAmBlB,MAAnBkB,CAA0B;AAAEX,UAAAA,GAAAA,EAAAA,CAAF;AAAOe,UAAAA,OAAAA,EAAAA,CAAP;AAAgBD,UAAAA,KAAAA,EAAAA;AAAhB,SAA1BH,CAVOK,CADlBA,GAcGA,CAhB8ByB;AAgB9BzB;AAeXuB;;AAAAA,IAAAA,iBAAAA,CAAAA;AAAkBvC,MAAAA,GAAAA,EAAEA,CAApBuC;AAAkBvC,MAAAA,OAAAA,EAAOe,CAAzBwB;AAAkBvC,MAAAA,KAAAA,EAAgBc;AAAlCyB,KAAAA,EAAkCzB;AAAAA,YAexB+B,CAAAA,GAASlC,KAAKF,CAALE,CAAamC,GAAbnC,CAAiBI,CAAAA,CAAQlB,MAAzBc,KAAoC,EAfrBG;;AAeqB,WAC9C,MAAMwB,CADwC,IAC/BO,CAD+B,EACvB;AAAA,YACpBR,CADoB;AACpBA,cACEU,CAAAA,GAAcT,CAAAA,CAAM1C,KAAN0C,CAAY;AAAEtC,UAAAA,GAAAA,EAAAA,CAAF;AAAOe,UAAAA,OAAAA,EAAAA,CAAP;AAAgBD,UAAAA,KAAAA,EAAAA;AAAhB,SAAZwB,CADhBD;AAC4CvB,YAC5CiC,CAD4CjC,EAC5CiC,OAEAV,CAAAA,GAASU,CAATV,EAASU,CACLC,KAAAA,CAAMC,OAAND,CAAcD,CAAdC,KAAqD,MAAvBD,CAAAA,CAAYG,MAA1CF,IAIMD,CAAAA,CAAYpD,WAAZoD,KAA4BK,MAA5BL,IAC8B,MAApCK,MAAAA,CAAOC,IAAPD,CAAYL,CAAZK,EAAyBF,MALzBF,IAS4B,aAAA,OAAhBD,CAVPA,MAGLV,CAAAA,GAAAA,KAASc,CAHJJ,CAATV,EAiBO;AAAEC,UAAAA,KAAAA,EAAAA,CAAF;AAASD,UAAAA,MAAAA,EAAAA;AAAT,SAnBPU;AAmBgBV;;AAAAA,aAIjB,EAJiBA;AAgB5BiB;;AAAAA,IAAAA,iBAAAA,CAAkB9D,CAAlB8D,EAAkB9D;AAAAA,WACTgD,CADShD,GACSD,CAAAA,CAAiBC,CAAjBD,CADTC;AAUlB+D;;AAAAA,IAAAA,eAAAA,CAAgB/D,CAAhB+D,EAAgB/D;AAAAA,WACPmD,CADOnD,GACSD,CAAAA,CAAiBC,CAAjBD,CADTC;AAQhBgE;;AAAAA,IAAAA,aAAAA,CAAclB,CAAdkB,EAAclB;AAiCL3B,WAAKF,CAALE,CAAa8C,GAAb9C,CAAiB2B,CAAAA,CAAMzC,MAAvBc,KAAuBd,KACnBY,CADmBZ,CACX6D,GADW7D,CACPyC,CAAAA,CAAMzC,MADCA,EACO,EADPA,CAAvBc,EAC8B,KAI9BF,CAJ8B,CAItBqC,GAJsB,CAIlBR,CAAAA,CAAMzC,MAJY,EAIJ8D,IAJI,CAICrB,CAJD,CAD9B3B;AAYTiD;;AAAAA,IAAAA,eAAAA,CAAgBtB,CAAhBsB,EAAgBtB;AAAAA,UAAAA,CACP3B,KAAKF,CAALE,CAAa8C,GAAb9C,CAAiB2B,CAAAA,CAAMzC,MAAvBc,CADO2B,EACgBzC,MAClB,IAAIgE,CAAAA,CAAAA,YAAJ,CAAiB,4CAAjB,EAA+D;AACjEhE,QAAAA,MAAAA,EAAQyC,CAAAA,CAAMzC;AADmD,OAA/D,CADkBA;AAENA,YAGhBiE,CAAAA,GAAanD,KAAKF,CAALE,CAAamC,GAAbnC,CAAiB2B,CAAAA,CAAMzC,MAAvBc,EAA+BoD,OAA/BpD,CAAuC2B,CAAvC3B,CAHGd;AAGoCyC,UAAAA,EACtDwB,CAAAA,GAAAA,CAAc,CADwCxB,CAAAA,EACxC,MAIR,IAAIuB,CAAAA,CAAAA,YAAJ,CAAiB,uCAAjB,CAJQ;AAIS,WAHlBpD,CAGkB,CAHVqC,GAGU,CAHNR,CAAAA,CAAMzC,MAGA,EAHQmE,MAGR,CAHeF,CAGf,EAH2B,CAG3B;AAH2B;;AA3TxDtD;;ACrBN,MAAIyD,CAAJ;;AAQO,QAAMC,CAAAA,GAA2B,OAC/BD,CAAAA,KACDA,CAAAA,GAAgB,IAAIzD,CAAJ,EAAhByD,EAEAA,CAAAA,CAAcrD,gBAAdqD,EAFAA,EAGAA,CAAAA,CAAc9C,gBAAd8C,EAJCA,CAAAA,EAMEA,CAP6B,CAAjC;;AAOIA,SAAAA,CAAAA,CAAAA,eAAAA,GCEX,cAA8BvE,CAA9B,CAA8BA;AAoB1BC,IAAAA,WAAAA,CAAYH,CAAZG,EAAYH;AAAS2E,MAAAA,SAAAA,EAAEA,CAAAA,GAAY,CAAC,GAAD,CAAvB3E;AAAS2E,MAAAA,QAAAA,EAAqBC,CAAAA,GAAW;AAAzC5E,QAAgD,EAA5DG,EAA4D;AAAA,YAejD0E,CAAAA,IAAY1D,KAAK2D,CAAL3D,CAAY0D,CAAZ1D,CAfqC,EAefnB,CAfe,GAefA,KACpC+E,CADoC/E,GACvB2E,CAhBsC,EAgBtCA,KACbK,CADaL,GACDC,CAjBuC;AA6B5DE;;AAAAA,IAAAA,CAAAA,CAAAA;AAAOtE,MAAAA,GAAAA,EAAEA,CAATsE;AAAOtE,MAAAA,OAAAA,EAAOe;AAAduD,KAAAA,EAAcvD;AAAAA,UACNA,CAAAA,IAA4B,eAAjBA,CAAAA,CAAQ0D,IADb1D,EACa0D,OAAAA,CACZ,CADYA;AACZ,YAELC,CAAAA,GAAoB1E,CAAAA,CAAI2E,QAAJ3E,GAAeA,CAAAA,CAAI4E,MAFlC;;AAEkCA,WACxC,MAAM7E,CADkC6E,IACxBjE,KAAK6D,CADmBI,EACnBJ,IAClBzE,CAAAA,CAAO8E,IAAP9E,CAAY2E,CAAZ3E,CADkByE,EACNE,OAAAA,CAML,CANKA;;AAML,aAAA,CAAA,CAGX/D,KAAK4D,CAAL5D,CAAgBmE,IAAhBnE,CAAsBZ,CAAAA,IAAWA,CAAAA,CAAO8E,IAAP9E,CAAY2E,CAAZ3E,CAAjCY,CAHW;AAGkC+D;;AAhE3BhF,GDFnBuE,ECkE8CS,CAAAA,CAAAA,WAAAA,GAAAA,CDlE9CT,ECkE8CS,CAAAA,CAAAA,KAAAA,GAAAA,CDlE9CT,ECkE8CS,CAAAA,CAAAA,MAAAA,GAAAA,CDlE9CT,ECkE8CS,CAAAA,CAAAA,aAAAA,GC1DzD,UAAuBK,CAAvB,EAAgCvF,CAAhC,EAAyCK,CAAzC,EAAyCA;AAAAA,QACjCyC,CADiCzC;;AACjCyC,QACmB,YAAA,OAAZyC,CADPzC,EAC6B;AAAA,YACvB0C,CAAAA,GAAa,IAAI9C,GAAJ,CAAQ6C,CAAR,EAAiB1E,QAAAA,CAASF,IAA1B,CADU;AAkC7BmC,MAAAA,CAAAA,GAAQ,IAAI5C,CAAJ,CAZc,CAAA;AAAGM,QAAAA,GAAAA,EAAAA;AAAH,OAAA,KASXA,CAAAA,CAAIG,IAAJH,KAAagF,CAAAA,CAAW7E,IAG3B,EAAyBX,CAAzB,EAAkCK,CAAlC,CAARyC;AAA0CzC,KAnC1CyC,MAqCC,IAAIyC,CAAAA,YAAmBE,MAAvB,EAED3C,CAAAA,GAAQ,IAAIxC,CAAJ,CAAgBiF,CAAhB,EAAyBvF,CAAzB,EAAkCK,CAAlC,CAARyC,CAFC,KAIA,IAAuB,cAAA,OAAZyC,CAAX,EAEDzC,CAAAA,GAAQ,IAAI5C,CAAJ,CAAUqF,CAAV,EAAmBvF,CAAnB,EAA4BK,CAA5B,CAARyC,CAFC,KAIA;AAAA,UAAA,EAAIyC,CAAAA,YAAmBrF,CAAvB,CAAA,EAAuBA,MAIlB,IAAImE,CAAAA,CAAAA,YAAJ,CAAiB,wBAAjB,EAA2C;AAC7CqB,QAAAA,UAAAA,EAAY,iBADiC;AAE7CC,QAAAA,QAAAA,EAAU,eAFmC;AAG7CC,QAAAA,SAAAA,EAAW;AAHkC,OAA3C,CAJkB1F;AACxB4C,MAAAA,CAAAA,GAAQyC,CAARzC;AAAQyC;;AAAAA,WASUb,CAAAA,GACRV,aADQU,CACM5B,CADN4B,GAEf5B,CAXKyC;AAWLzC,GFlEA2B,EEkEA3B,CAAAA,CAAAA,eAAAA,GCxEX,UAAyB9C,CAAzB,EAAyBA;AACC0E,IAAAA,CAAAA,GACRX,eADQW,CACQ1E,CADR0E;AACQ1E,GHIvByE,EGJuBzE,CAAAA,CAAAA,iBAAAA,GCClC,UAA2BA,CAA3B,EAA2BA;AACD0E,IAAAA,CAAAA,GACRZ,iBADQY,CACU1E,CADV0E;AACU1E,GJCzByE,EIDyBzE,CJCzByE;AIDyBzE,C,CAAAA,E,EAAAA,OAAAA,CAAAA,IAAAA,CAAAA,Q","sourcesContent":["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:5.1.4'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof module:workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {module:workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * [Route]{@link module:workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * [See the module docs for info.]{@link https://developers.google.com/web/tools/workbox/modules/workbox-routing}\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * [handler's]{@link module:workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if ((url.origin !== location.origin) && (result.index !== 0)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp}' only partially matched ` +\n                        `against the cross-origin URL '${url}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle (this is usually\n     *     from a fetch event, but it does not have to be).\n     * @param {FetchEvent} [options.event] The event that triggered the request,\n     *     if applicable.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const { params, route } = this.findMatchingRoute({ url, request, event });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        if (!handler && this._defaultHandler) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler.`);\n            }\n            handler = this._defaultHandler;\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        if (responsePromise instanceof Promise && this._catchHandler) {\n            responsePromise = responsePromise.catch((err) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Still include URL here as it will be async from the console group\n                    // and may not make sense without the URL\n                    logger.groupCollapsed(`Error thrown when responding to: ` +\n                        ` ${getFriendlyURL(url)}. Falling back to Catch Handler.`);\n                    logger.error(`Error thrown by:`, route);\n                    logger.error(err);\n                    logger.groupEnd();\n                }\n                return this._catchHandler.handle({ url, request, event });\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request The request to match.\n     * @param {Event} [options.event] The corresponding event (unless N/A).\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(url, URL, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.url',\n            });\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'findMatchingRoute',\n                paramName: 'options.request',\n            });\n        }\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, request, event });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setDefaultHandler(handler) {\n        this._defaultHandler = normalizeHandler(handler);\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * [Route]{@link module:workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * [`mode`]{@link https://fetch.spec.whatwg.org/#concept-request-mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof module:workbox-routing\n * @extends module:workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` +\n                    `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call [registerRoute()]{@link module:workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|module:workbox-routing.Route~matchCallback|module:workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {module:workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {module:workbox-routing.Route} The generated `Route`(Useful for\n * unregistering).\n *\n * @memberof module:workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http') ?\n                captureUrl.pathname : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if ((new RegExp(`${wildcards}`)).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if ((url.pathname === captureUrl.pathname) &&\n                    (url.origin !== captureUrl.origin)) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {module:workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof module:workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n"]},"metadata":{},"sourceType":"script"}